{"version":3,"sources":["API.js","VKMethods.js","TradeSTabs.js","TradeSContent.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["API","recieved","callback","event","JSON","parse","currentTarget","responseText","e","authorize","id","token","xhr","XMLHttpRequest","open","obj","method","data","onload","send","stringify","getUserById","getUserByKey","key","getMyData","cb","chrome","storage","local","get","r","userId","setUserSetts","setts","setUserSettsByKey","resp","uploadMySetts","res","settsData","accessToken","undefined","messages","map","groupToken","downloadMySetts","user","i","toSend","set","VKMethods","executed","target","getGroupChats","sendMessageToGroupChat","message","encodeURIComponent","getUsersGroups","getMyGroups","postOnGroupWall","groupId","postOnMyGroupWall","m","APIKeyDialog","props","onOk","state","onCancel","keyChanged","newKey","value","setState","render","Dialog","onClose","switchDialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","DialogActions","Button","onClick","color","React","Component","MessagesTab","build","platform","gotToken","loaded","rebuild","getMessages","platformMsg","reload","openDialog","closeDialog","self","updateMessages","chats","load","p","result","error","alert","console","log","response","items","filter","c","conversation","peer","type","chat","name","chat_settings","title","selected","includes","toSendChanged","getChatRows","TableRow","TableCell","Switch","checked","align","getChatTable","TableContainer","component","Paper","Table","TableHead","TableBody","CircularProgress","style","padding","List","ListItem","button","ListItemIcon","ListItemText","primary","slice","PostsTab","groups","getPosts","posts","updatePosts","newPosts","group","getGropuRows","EditBtnNameDialog","btnList","edtButton","buttons","index","etdIndex","replace","updateButtons","delta","closeBtnNameDialog","nameDialog","initValue","DonatFrame","src","width","height","frameborder","allowtransparency","scrolling","Typography","Link","href","TradeSContent","currentPage","Divider","OPTabs","useState","setValue","Tabs","newValue","tabChanged","Tab","MessagesContent","currentTab","PostsContent","FormatContent","getButtons","timeDelta","text","addButton","push","length","openBtnNameDialog","deleteButton","splice","getFormatAvatar","getFormatText","format","formatTypes","textFormatChanged","formatIndex","buttonIndex","v","getFormatContent","size","closeMenus","buttonMenus","ref","onAddItem","onDeleteItem","itemIndex","openAddItemMenu","t","addItem","itemAdder","createRef","variant","Popper","anchorEl","role","transition","ClickAwayListener","onClickAway","MenuList","autoFocusItem","MenuItem","getButtonConstructor","preview","ButtonFormat","fromItems","restore","ButtonGroup","Breadcrumbs","separator","getButtonsList","background","setTimeDelta","valueLabelFormat","parseInt","getMarks","Array","keys","marginLeft","Slider","step","marks","min","max","paddingTop","paddingBottom","AccountContent","Card","CardHeader","avatar","Avatar","subheader","CardActions","clear","window","location","ass","dir","exp","stn","stv","plf","join","add","insert","delete","update","this","b","CenterView","position","left","top","transform","children","Page","loadAccount","onChanged","addListener","loadData","logined","registered","s","TRSVkLogin","register","onPanelSwitch","home","authContent","CardContent","alignItems","justifyContent","AppBar","Toolbar","IconButton","edge","aria-label","cursor","SwipeableDrawer","onOpen","page","Backdrop","runtime","onMessage","request","sender","sendResponse","extension","TradeSPath","PageMenu","openMessages","openPosts","openFormat","openAccount","marginTop","paddingLeft","textAlign","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ddb07770.chunk.js","sourcesContent":["/*global chrome*/\r\n\r\nclass API {\r\n    static recieved = (callback) => (event) => {\r\n        try {\r\n            callback(JSON.parse(event.currentTarget.responseText));\r\n        } catch (e) {}\r\n    };\r\n\r\n    static authorize = (id, token, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"auth\",\r\n            data: { id: id, token: token },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static getUserById = (id, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"user\",\r\n            data: { id: id },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static getUserByKey = (key, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"user\",\r\n            data: { key: key },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static getMyData = (callback) => {\r\n        var cb = callback;\r\n        chrome.storage.local.get([\"userId\"], (r)=>{\r\n            API.getUserById(r.userId, cb)\r\n        })\r\n    }\r\n\r\n    static setUserSetts = (id, setts, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"setts\",\r\n            data: { id: id, setts: setts },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static setUserSettsByKey = (key, setts, callback) => {\r\n        API.getUserByKey(key, (resp) => {\r\n            API.setUserSetts(resp.id, setts, callback);\r\n        });\r\n    };\r\n\r\n    static uploadMySetts = (callback) => {\r\n        var cb = callback;\r\n        chrome.storage.local.get([\"settsData\", \"userId\"], (res) => {\r\n            var r = res;\r\n            if (r.userId && r.settsData) {\r\n                var setts = {\r\n                    accessToken: r.settsData.accessToken\r\n                        ? r.settsData.accessToken\r\n                        : undefined,\r\n                    messages: r.settsData.messages\r\n                        ? r.settsData.messages.map((e) => {\r\n                              return {\r\n                                  groupToken: e.groupToken\r\n                                      ? e.groupToken\r\n                                      : undefined,\r\n                              };\r\n                          })\r\n                        : undefined,\r\n                };\r\n                API.setUserSetts(r.userId, setts, cb);\r\n            }\r\n        });\r\n    };\r\n\r\n    static downloadMySetts = (callback) => {\r\n        var cb = callback;\r\n        chrome.storage.local.get([\"settsData\", \"userId\"], (res) => {\r\n            var r = res;\r\n            if (r.userId) {\r\n                API.getUserById(r.userId, (user) => {\r\n                    var setts = r.settsData ? r.settsData : {};\r\n                    setts.messages = user.setts.messages\r\n                        ? user.setts.messages.map((e, i) => {\r\n                              e.toSend =\r\n                                  setts.messages &&\r\n                                  setts.messages[i] &&\r\n                                  setts.messages[i].toSend\r\n                                      ? setts.messages[i].toSend\r\n                                      : [];\r\n                              return e;\r\n                          })\r\n                        : [];\r\n                    setts.accessToken = user.setts.accessToken;\r\n                    chrome.storage.local.set({ settsData: setts }, () => {\r\n                        try {\r\n                            cb(setts);\r\n                        } catch (e) {}\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nexport default API;\r\n","/*global chrome*/\r\n\r\nclass VKMethods {\r\n    static executed = (callback) => (event) => {\r\n        if (callback) {\r\n            try {\r\n                callback(JSON.parse(event.target.responseText));\r\n            } catch (e) {}\r\n        }\r\n    };\r\n\r\n    static getGroupChats = (groupToken, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/messages.getConversations?access_token=${groupToken}&v=5.120`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static sendMessageToGroupChat = (groupToken, id, message, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/messages.send?peer_id=${id}&message=${encodeURIComponent(\r\n                message\r\n            )}&access_token=${groupToken}&v=5.38`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static getUsersGroups = (id, token, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/groups.get?user_id=${id}&filter=admin,editor,moder&extended=1&v=5.92&access_token=${token}`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static getMyGroups = (callback) => {\r\n        var cb = callback\r\n        chrome.storage.local.get(['settsData', 'userId'], (res)=>{\r\n            var r = res;\r\n            VKMethods.getUsersGroups(r.userId, r.settsData.accessToken, cb)\r\n        })\r\n    }\r\n\r\n    static postOnGroupWall = (groupId, token, message, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"POST\",\r\n            `https://api.vk.com/method/wall.post?owner_id=-${groupId}&from_group=1&message=${message}&signed=1&v=5.120&access_token=${token}`,\r\n            true\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static postOnMyGroupWall = (groupId, message, callback) => {\r\n        var cb = callback\r\n        var id = groupId;\r\n        var m = message;\r\n        chrome.storage.local.get(['settsData'], (res)=>{\r\n            var r = res;\r\n            VKMethods.postOnGroupWall(id, r.settsData.accessToken, m, cb)\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default VKMethods;\r\n","/*global chrome*/\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport React from \"react\";\r\nimport VKMethods from \"./VKMethods\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nclass APIKeyDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { key: \"\" };\r\n    }\r\n\r\n    onOk = () => {\r\n        this.props.onOk(this.state.key);\r\n    };\r\n\r\n    onCancel = () => {\r\n        this.props.onCancel();\r\n    };\r\n\r\n    keyChanged = (event) => {\r\n        if (event.currentTarget) {\r\n            var newKey = event.currentTarget.value;\r\n            this.setState((state) => {\r\n                state.key = newKey;\r\n                return state;\r\n            });\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Dialog\r\n                open={this.props.open}\r\n                onClose={this.switchDialog}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle>Введите API-ключ группы</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Для обеспечения возможности отправки сообщений в чаты\r\n                        необходимо указать API-ключ группы.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"API-ключ группы\"\r\n                        fullWidth\r\n                        onChange={this.keyChanged}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.onCancel} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={this.onOk} color=\"primary\">\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n}\r\n\r\nclass MessagesTab extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            platform: this.props.platform,\r\n            openDialog: false,\r\n            gotToken: false,\r\n            loaded: false,\r\n        };\r\n    }\r\n\r\n    build = () => {\r\n        return this.state.platform != this.props.platform\r\n            ? this.setState(\r\n                  (state, props) => {\r\n                      state.gotToken = false;\r\n                      state.platform = props.platform;\r\n                      state.loaded = false;\r\n                      state.groupToken = undefined;\r\n                      return state;\r\n                  },\r\n                  () => {\r\n                      this.rebuild();\r\n                  }\r\n              )\r\n            : this.rebuild();\r\n    };\r\n\r\n    rebuild = () => {\r\n        return (\r\n            !this.state.gotToken &&\r\n            this.getMessages((platformMsg, setts) => {\r\n                return (\r\n                    platformMsg.groupToken &&\r\n                    this.gotToken(platformMsg.groupToken, this.reload)\r\n                );\r\n            })\r\n        );\r\n    };\r\n\r\n    openDialog = () => {\r\n        this.setState((state) => {\r\n            state.openDialog = true;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    closeDialog = () => {\r\n        this.setState((state) => {\r\n            state.openDialog = false;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    getMessages = (callback) => {\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\"], (res) => {\r\n            var r = res;\r\n            var data = r.settsData != undefined ? r.settsData : {};\r\n            data.messages = data.messages ? data.messages : [];\r\n            data.messages[self.state.platform] = data.messages[\r\n                self.state.platform\r\n            ]\r\n                ? data.messages[self.state.platform]\r\n                : {};\r\n            try {\r\n                callback(data.messages[self.state.platform], data);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updateMessages = (token, toSend, callback) => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            platformMsg.groupToken = token;\r\n            platformMsg.toSend = toSend;\r\n            setts.messages[this.props.platform] = platformMsg;\r\n            chrome.storage.local.set({ settsData: setts }, () => {\r\n                try {\r\n                    callback(platformMsg, setts);\r\n                } catch (e) {}\r\n            });\r\n        });\r\n    };\r\n\r\n    gotToken = (token, callback) => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            this.updateMessages(token, platformMsg.toSend, () => {\r\n                this.setState(\r\n                    (state) => {\r\n                        state.gotToken = true;\r\n                        state.groupToken = token;\r\n                        state.openDialog = false;\r\n                        return state;\r\n                    },\r\n                    () => {\r\n                        try {\r\n                            callback(token, platformMsg, setts);\r\n                        } catch (e) {}\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n\r\n    reload = () => {\r\n        this.setState(\r\n            (state) => {\r\n                state.loaded = false;\r\n                state.openDialog = false;\r\n                state.chats = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.load();\r\n            }\r\n        );\r\n    };\r\n\r\n    load = () => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            var p = {\r\n                groupToken: platformMsg.groupToken,\r\n                toSend: platformMsg.toSend ? platformMsg.toSend : [],\r\n            };\r\n            VKMethods.getGroupChats(p.groupToken, (result) => {\r\n                if (result.error) {\r\n                    alert(result);\r\n                    console.log(result);\r\n                }\r\n                this.setState(\r\n                    (state) => {\r\n                        p.toSend = p.toSend ? p.toSend : [];\r\n                        state.chats = result.response.items\r\n                            .filter((c) => {\r\n                                return c.conversation.peer.type == \"chat\";\r\n                            })\r\n                            .map((chat) => {\r\n                                return {\r\n                                    id: chat.conversation.peer.id,\r\n                                    name: chat.conversation.chat_settings.title,\r\n                                    selected: p.toSend.includes(\r\n                                        chat.conversation.peer.id\r\n                                    ),\r\n                                };\r\n                            });\r\n                        state.loaded = true;\r\n\r\n                        return state;\r\n                    },\r\n                    () => {\r\n                        this.updateMessages(\r\n                            platformMsg.groupToken,\r\n                            this.state.chats\r\n                                .filter((e) => e.selected)\r\n                                .map((e) => e.id)\r\n                        );\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n\r\n    toSendChanged = (chat) => (event) => {\r\n        chat.selected = !chat.selected;\r\n        this.getMessages((platformMsg, setts) => {\r\n            this.updateMessages(\r\n                platformMsg.groupToken,\r\n                this.state.chats\r\n                    .filter((e) =>\r\n                        e.id == chat.id ? chat.selected : e.selected\r\n                    )\r\n                    .map((e) => e.id),\r\n                () => {\r\n                    this.setState((state) => {\r\n                        state.chats = state.chats.map((e) => {\r\n                            return e.id == chat.id ? chat : e;\r\n                        });\r\n                        return state;\r\n                    });\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    getChatRows = () => {\r\n        return this.state.chats.map((e) => {\r\n            return (\r\n                <TableRow>\r\n                    <TableCell>{e.name}</TableCell>\r\n                    <TableCell>\r\n                        <Switch\r\n                            checked={e.selected}\r\n                            color=\"primary\"\r\n                            onChange={this.toSendChanged(e)}\r\n                        />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                this.getMessages((platformMsg) => {\r\n                                    VKMethods.sendMessageToGroupChat(\r\n                                        platformMsg.groupToken,\r\n                                        e.id,\r\n                                        \"Тестовое сообщение\"\r\n                                    );\r\n                                });\r\n                            }}\r\n                        >\r\n                            Тестовое сообщение\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n            );\r\n        });\r\n    };\r\n\r\n    getChatTable = () => {\r\n        if (this.state.loaded) {\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Чат</TableCell>\r\n                                <TableCell>Отправка</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Button onClick={this.reload}>\r\n                                        <RefreshIcon />\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>{this.getChatRows()}</TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n\r\n    render = () => {\r\n        this.build();\r\n        if (this.state.gotToken) {\r\n            return (\r\n                <>\r\n                    <List>\r\n                        <ListItem button onClick={this.openDialog}>\r\n                            <ListItemIcon>\r\n                                <EditIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                primary={\r\n                                    this.state.groupToken.slice(0, 10) + \"...\"\r\n                                }\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                    <APIKeyDialog\r\n                        open={this.state.openDialog}\r\n                        onCancel={this.closeDialog}\r\n                        onOk={(token) => {\r\n                            this.gotToken(token, this.reload);\r\n                        }}\r\n                    />\r\n                    {this.getChatTable()}\r\n                </>\r\n            );\r\n        } else if (this.state.gotToken != undefined) {\r\n            return (\r\n                <>\r\n                    <List>\r\n                        <ListItem button onClick={this.openDialog}>\r\n                            <ListItemIcon>\r\n                                <AddIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={\"Укажите API-ключ группы\"} />\r\n                        </ListItem>\r\n                    </List>\r\n                    <APIKeyDialog\r\n                        open={this.state.openDialog}\r\n                        onCancel={this.closeDialog}\r\n                        onOk={(token) => {\r\n                            this.gotToken(token, this.reload);\r\n                        }}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n}\r\n\r\nclass PostsTab extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false,\r\n            platform: -1, //this.props.platform,\r\n            groups: undefined,\r\n        };\r\n    }\r\n\r\n    build = () => {\r\n        return this.state.platform != this.props.platform\r\n            ? this.reload()\r\n            : undefined;\r\n    };\r\n\r\n    reload = () => {\r\n        this.setState(\r\n            (state) => {\r\n                state.loaded = false;\r\n                state.groups = undefined;\r\n                state.platform = this.props.platform;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.load();\r\n            }\r\n        );\r\n    };\r\n\r\n    load = () => {\r\n        this.getPosts((posts, setts) => {\r\n            var p = posts ? posts.map((e) => e) : [];\r\n            VKMethods.getMyGroups((result) => {\r\n                if (result.error) {\r\n                    alert(result);\r\n                    console.log(result);\r\n                    return;\r\n                }\r\n                this.setState((state) => {\r\n                    state.loaded = true;\r\n                    state.groups = result.response.items.map(\r\n                        (e) => {\r\n                            return {\r\n                                id: e.id,\r\n                                name: e.name,\r\n                                selected: p.includes(e.id),\r\n                            };\r\n                        },\r\n                        () => {\r\n                            this.updatePosts(\r\n                                this.state.groups\r\n                                    .filter((e) => e.selected)\r\n                                    .map((e) => e.id)\r\n                            );\r\n                        }\r\n                    );\r\n                    return state;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getPosts = (callback) => {\r\n        var cb = callback;\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\"], (r) => {\r\n            var posts =\r\n                r.settsData.posts && r.settsData.posts[self.state.platform]\r\n                    ? r.settsData.posts[self.state.platform]\r\n                    : [];\r\n            try {\r\n                cb(posts, r.settsData);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updatePosts = (newPosts, callback) => {\r\n        this.getPosts((posts, setts) => {\r\n            var cb = callback;\r\n            setts.posts = setts.posts ? setts.posts : [];\r\n            setts.posts[this.state.platform] = newPosts;\r\n            chrome.storage.local.set({ settsData: setts }, () => {\r\n                try {\r\n                    cb(setts);\r\n                } catch (e) {}\r\n            });\r\n        });\r\n    };\r\n\r\n    toSendChanged = (group) => (event) => {\r\n        group.selected = !group.selected;\r\n\r\n        this.updatePosts(\r\n            this.state.groups\r\n                .filter((e) => (e.id == group.id ? group.selected : e.selected))\r\n                .map((e) => e.id),\r\n            () => {\r\n                this.setState((state) => {\r\n                    state.loaded = true;\r\n                    state.groups = state.groups.map((e) => {\r\n                        return e.id == group.id ? group : e;\r\n                    });\r\n                    return state;\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    getGropuRows = () => {\r\n        return this.state.groups.map((e) => {\r\n            return (\r\n                <TableRow>\r\n                    <TableCell>{e.name}</TableCell>\r\n                    <TableCell>\r\n                        <Switch\r\n                            checked={e.selected}\r\n                            color=\"primary\"\r\n                            onChange={this.toSendChanged(e)}\r\n                        />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                VKMethods.postOnMyGroupWall(\r\n                                    e.id,\r\n                                    \"Тестовый пост\"\r\n                                );\r\n                            }}\r\n                        >\r\n                            Тестовый пост\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n            );\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        this.build();\r\n        if (this.state.loaded) {\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Группа</TableCell>\r\n                                <TableCell>Отправка</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Button onClick={this.reload}>\r\n                                        <RefreshIcon />\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>{this.getGropuRows()}</TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n}\r\n\r\nexport { MessagesTab, PostsTab };\r\n","/*global chrome*/\r\n\r\nimport React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\r\nimport UnfoldMoreIcon from \"@material-ui/icons/UnfoldMore\";\r\nimport TimelapseIcon from \"@material-ui/icons/Timelapse\";\r\nimport FormatLineSpacingIcon from \"@material-ui/icons/FormatLineSpacing\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport TimelineIcon from \"@material-ui/icons/Timeline\";\r\n\r\nimport API from \"./API\";\r\n\r\nimport { MessagesTab, PostsTab } from \"./TradeSTabs\";\r\nimport {\r\n    Breadcrumbs,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Button,\r\n    ButtonGroup,\r\n    ListItemIcon,\r\n} from \"@material-ui/core\";\r\n\r\nclass EditBtnNameDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { key: props.initValue };\r\n    }\r\n\r\n    onOk = () => {\r\n        var button = this.props.btnList.state.edtButton;\r\n        var buttons = this.props.btnList.state.buttons;\r\n        var index = this.props.btnList.state.etdIndex;\r\n        button.name =\r\n            this.state.key.replace(/\\s/g, \"\") != \"\"\r\n                ? this.state.key\r\n                : button.name;\r\n        buttons[index] = button;\r\n        this.props.btnList.updateButtons(\r\n            buttons,\r\n            this.props.btnList.state.delta,\r\n            () => {\r\n                this.props.btnList.closeBtnNameDialog();\r\n            }\r\n        );\r\n    };\r\n\r\n    onCancel = () => {\r\n        this.props.btnList.closeBtnNameDialog();\r\n    };\r\n\r\n    keyChanged = (event) => {\r\n        if (event.currentTarget) {\r\n            var newKey = event.currentTarget.value;\r\n            this.setState((state) => {\r\n                state.key = newKey;\r\n                return state;\r\n            });\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Dialog open={this.props.btnList.state.nameDialog}>\r\n                <DialogTitle>Введите название кноки</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Введите отображаемое на платформах название кнопки.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Название кнопки\"\r\n                        fullWidth\r\n                        value={this.state.key}\r\n                        onChange={this.keyChanged}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.onCancel} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={this.onOk} color=\"primary\">\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n}\r\n\r\nclass DonatFrame extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <iframe\r\n                    src=\"https://money.yandex.ru/quickpay/shop-widget?writer=seller&targets=%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0%20Trade-S&targets-hint=&default-sum=&button-text=13&payment-type-choice=on&mobile-payment-type-choice=on&hint=&successURL=&quickpay=shop&account=4100115567443945\"\r\n                    width=\"423\"\r\n                    height=\"222\"\r\n                    frameborder=\"0\"\r\n                    allowtransparency=\"true\"\r\n                    scrolling=\"no\"\r\n                ></iframe>\r\n                <Typography>\r\n                    Поделитесь{\" \"}\r\n                    <Link\r\n                        target=\"_blank\"\r\n                        href=\"https://money.yandex.ru/quickpay/shop-widget?writer=seller&targets=%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0%20Trade-S&targets-hint=&default-sum=&button-text=13&payment-type-choice=on&mobile-payment-type-choice=on&comment=on&hint=&successURL=&quickpay=shop&account=4100115567443945\"\r\n                    >\r\n                        ссылкой\r\n                    </Link>{\" \"}\r\n                    для большей поддержки :)\r\n                </Typography>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass TradeSContent extends React.Component {\r\n    render = () => {\r\n        switch (this.props.currentPage) {\r\n            case 0:\r\n                return <MessagesContent />;\r\n            case 1:\r\n                return <PostsContent />;\r\n            case 2:\r\n                return <FormatContent />;\r\n            case 3:\r\n                return <AccountContent />;\r\n            default:\r\n                return (\r\n                    <>\r\n                        <Paper style={{ padding: 40, margin: 40 }}>\r\n                            <Typography>\r\n                                Вас приветствует расширение-помощник для\r\n                                автоматической отправки сигналов с платформ в\r\n                                социальные сети и мессенджеры\r\n                            </Typography>\r\n                            <Typography>\r\n                                Для настройки расширения нажмите меню\r\n                                <Button>\r\n                                    <MenuIcon />\r\n                                </Button>\r\n                            </Typography>\r\n                        </Paper>\r\n                        <Divider />\r\n                        <div style={{ padding: 40 }}>\r\n                            <DonatFrame />\r\n                        </div>\r\n                    </>\r\n                );\r\n        }\r\n    };\r\n}\r\n\r\nfunction OPTabs(props) {\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        props.tabChanged(newValue);\r\n    };\r\n    return (\r\n        <Paper>\r\n            <Tabs value={value} onChange={handleChange}>\r\n                <Tab label=\"Olymp Trade\" />\r\n                <Tab label=\"Pocket Option\" />\r\n            </Tabs>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nclass MessagesContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { index: 0 };\r\n    }\r\n\r\n    tabChanged = (index) => {\r\n        this.setState((state) => {\r\n            state.index = index;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    currentTab = () => {\r\n        return <MessagesTab platform={this.state.index} />;\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <OPTabs tabChanged={this.tabChanged} />\r\n                {this.currentTab()}\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass PostsContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { index: 0 };\r\n    }\r\n\r\n    tabChanged = (index) => {\r\n        this.setState((state) => {\r\n            state.index = index;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <OPTabs tabChanged={this.tabChanged} />\r\n                <PostsTab platform={this.state.index} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass FormatContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { loaded: false, buttons: undefined, nameDialog: false };\r\n        this.load();\r\n    }\r\n\r\n    getButtons = (callback) => {\r\n        var self = this;\r\n        var cb = callback;\r\n        chrome.storage.local.get([\"buttons\", \"timeDelta\"], (r) => {\r\n            var delta = r.timeDelta ? r.timeDelta : 0;\r\n            var buttons = r.buttons\r\n                ? r.buttons\r\n                : [\r\n                      {\r\n                          name: \"Сигнал №1\",\r\n                          items: [\r\n                              { type: \"ass\" },\r\n                              { type: \"text\", text: \"готовим\" },\r\n                          ],\r\n                      },\r\n                      {\r\n                          name: \"Сигнал №2\",\r\n                          items: [\r\n                              { type: \"ass\" },\r\n                              { type: \"exp\" },\r\n                              { type: \"dir\" },\r\n                              { type: \"text\", text: \"СТАВИМ\" },\r\n                          ],\r\n                      },\r\n                  ];\r\n            try {\r\n                cb(buttons, delta);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updateButtons = (buttons, delta, callback) => {\r\n        var cb = callback;\r\n        if (delta != null) {\r\n            chrome.storage.local.set(\r\n                { buttons: buttons, timeDelta: delta },\r\n                () => {\r\n                    try {\r\n                        cb(buttons, delta);\r\n                    } catch (e) {}\r\n                }\r\n            );\r\n        } else {\r\n            chrome.storage.local.set({ buttons: buttons }, () => {\r\n                try {\r\n                    cb(buttons);\r\n                } catch (e) {}\r\n            });\r\n        }\r\n    };\r\n\r\n    load = () => {\r\n        this.getButtons((buttons, delta) => {\r\n            this.setState((state) => {\r\n                state.timeDelta = delta;\r\n                state.buttons = buttons;\r\n                state.loaded = true;\r\n                return state;\r\n            });\r\n        });\r\n    };\r\n\r\n    addButton = () => {\r\n        this.getButtons((buttons) => {\r\n            buttons.push({ name: `Сигнал №${buttons.length}`, items: [] });\r\n            this.updateButtons(buttons, undefined, (buttons) => {\r\n                this.setState((state) => {\r\n                    state.buttons = buttons;\r\n                    return state;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    openBtnNameDialog = (button, index) => () => {\r\n        this.setState((state) => {\r\n            state.edtButton = button;\r\n            state.etdIndex = index;\r\n            state.nameDialog = true;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    closeBtnNameDialog = () => {\r\n        this.setState((state) => {\r\n            state.edtButton = undefined;\r\n            state.etdIndex = undefined;\r\n            state.nameDialog = false;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    deleteButton = (index) => {\r\n        this.getButtons((buttons) => {\r\n            buttons.splice(index, 1);\r\n            this.updateButtons(buttons, undefined, (buttons) => {\r\n                this.setState((state) => {\r\n                    state.buttons = buttons;\r\n                    return state;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getFormatAvatar = (type) => {\r\n        switch (type) {\r\n            case \"ass\":\r\n                return <AssessmentIcon />;\r\n            case \"dir\":\r\n                return <UnfoldMoreIcon />;\r\n            case \"exp\":\r\n                return <TimelapseIcon />;\r\n            case \"stn\":\r\n                return <FormatLineSpacingIcon />;\r\n            case \"stv\":\r\n                return <FormatLineSpacingIcon />;\r\n            case \"plf\":\r\n                return <TimelineIcon />;\r\n            case \"text\":\r\n                return <DescriptionIcon />;\r\n        }\r\n    };\r\n\r\n    getFormatText = (format) => {\r\n        switch (format.type) {\r\n            case \"ass\":\r\n                return \"Пара\";\r\n            case \"dir\":\r\n                return \"Направление\";\r\n            case \"exp\":\r\n                return \"Экспирация\";\r\n            case \"stn\":\r\n                return \"Номер страйк-цены\";\r\n            case \"stv\":\r\n                return \"Значение страйк-цены\";\r\n            case \"plf\":\r\n                return \"Платформа\";\r\n            case \"text\":\r\n                return \"Текст\";\r\n        }\r\n    };\r\n\r\n    formatTypes = () => {\r\n        return [\"ass\", \"dir\", \"exp\", \"stn\", \"stv\", \"plf\", \"text\"];\r\n    };\r\n\r\n    textFormatChanged = (formatIndex, buttonIndex) => (event) => {\r\n        var v = event.currentTarget.value;\r\n        var buttons = this.state.buttons;\r\n        buttons[buttonIndex].items[formatIndex].text = v;\r\n        this.setState(\r\n            (state) => {\r\n                state.buttons = buttons;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.updateButtons(buttons);\r\n            }\r\n        );\r\n    };\r\n\r\n    getFormatContent = (format, formatIndex, buttonIndex) => {\r\n        if (format.type == \"text\") {\r\n            return (\r\n                <TextField\r\n                    value={format.text}\r\n                    size=\"small\"\r\n                    onChange={this.textFormatChanged(formatIndex, buttonIndex)}\r\n                ></TextField>\r\n            );\r\n        }\r\n        return this.getFormatText(format);\r\n    };\r\n\r\n    closeMenus = () => {\r\n        this.setState((state) => {\r\n            state.buttonMenus = undefined;\r\n            state.ref = undefined;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    onAddItem = (type, button, index) => (event) => {\r\n        button.items.push(\r\n            type == \"text\" ? { type: type, text: \"\" } : { type: type }\r\n        );\r\n        this.setState(\r\n            (state) => {\r\n                state.buttons[index] = button;\r\n                state.buttonMenus = undefined;\r\n                state.ref = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.updateButtons(this.state.buttons);\r\n            }\r\n        );\r\n    };\r\n\r\n    onDeleteItem = (itemIndex, button, index) => (event) => {\r\n        button.items.splice(itemIndex, 1);\r\n        this.setState(\r\n            (state) => {\r\n                state.buttons[index] = button;\r\n                state.buttonMenus = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.updateButtons(this.state.buttons);\r\n            }\r\n        );\r\n    };\r\n\r\n    openAddItemMenu = (index) => (event) => {\r\n        var t = event.currentTarget;\r\n        this.setState((state) => {\r\n            state.buttonMenus = {};\r\n            state.buttonMenus[index] = { addItem: true };\r\n            state.ref = t;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    itemAdder = (button, index) => {\r\n        var ref = React.createRef();\r\n        return [\r\n            <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                onClick={this.openAddItemMenu(index)}\r\n            >\r\n                <AddIcon />\r\n            </Button>,\r\n            <Popper\r\n                open={\r\n                    this.state.buttonMenus &&\r\n                    this.state.buttonMenus[index] &&\r\n                    this.state.buttonMenus[index].addItem\r\n                }\r\n                anchorEl={this.state.ref ? this.state.ref : null}\r\n                role={undefined}\r\n                transition\r\n            >\r\n                <Paper>\r\n                    <ClickAwayListener onClickAway={this.closeMenus}>\r\n                        <MenuList\r\n                            autoFocusItem={\r\n                                this.state.buttonMenus &&\r\n                                this.state.buttonMenus[index] &&\r\n                                this.state.buttonMenus[index].addItem\r\n                            }\r\n                        >\r\n                            {this.formatTypes().map((t) => {\r\n                                return (\r\n                                    <MenuItem\r\n                                        onClick={this.onAddItem(\r\n                                            t,\r\n                                            button,\r\n                                            index\r\n                                        )}\r\n                                    >\r\n                                        {this.getFormatText({\r\n                                            type: t,\r\n                                        })}\r\n                                    </MenuItem>\r\n                                );\r\n                            })}\r\n                        </MenuList>\r\n                    </ClickAwayListener>\r\n                </Paper>\r\n            </Popper>,\r\n        ];\r\n    };\r\n\r\n    getButtonConstructor = (button, index) => {\r\n        var preview = ButtonFormat.fromItems(\r\n            this.state.buttons[index].items\r\n        ).restore(\"EUR USD\", \"вверх\", \"1 мин.\", \"0\", \"1.154\", \"Olymp Trade\");\r\n        return (\r\n            <List>\r\n                <ListItem>\r\n                    <ButtonGroup variant=\"text\">\r\n                        <Button onClick={this.openBtnNameDialog(button, index)}>\r\n                            <EditIcon />\r\n                            {button.name}\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                this.deleteButton(index);\r\n                            }}\r\n                        >\r\n                            <DeleteIcon />\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Breadcrumbs style={{ width: \"100%\" }} separator=\"\">\r\n                        {button.items.map((e, i) => {\r\n                            return (\r\n                                <ButtonGroup size=\"small\" variant=\"outlined\">\r\n                                    <Button>\r\n                                        {this.getFormatAvatar(e.type)}\r\n                                        {this.getFormatContent(e, i, index)}\r\n                                    </Button>\r\n                                    <Button\r\n                                        onClick={this.onDeleteItem(\r\n                                            i,\r\n                                            button,\r\n                                            index\r\n                                        )}\r\n                                    >\r\n                                        <DeleteIcon />\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            );\r\n                        })}\r\n                        {this.itemAdder(button, index)}\r\n                    </Breadcrumbs>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Button>Предпросмотр</Button>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        style={{ width: \"100%\" }}\r\n                        value={preview}\r\n                    ></TextField>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n    };\r\n\r\n    getButtonsList = () => {\r\n        return (\r\n            <div>\r\n                <EditBtnNameDialog btnList={this}></EditBtnNameDialog>\r\n                <List>\r\n                    {this.state.buttons.map((e, i) => {\r\n                        return (\r\n                            <>\r\n                                <Divider />\r\n                                <ListItem\r\n                                    style={{ margin: 5, background: \"#ffffff\" }}\r\n                                >\r\n                                    {this.getButtonConstructor(e, i)}\r\n                                </ListItem>\r\n                                <Divider />\r\n                            </>\r\n                        );\r\n                    })}\r\n                    <Divider />\r\n                    <ListItem>\r\n                        <Button\r\n                            size=\"large\"\r\n                            style={{ width: \"100%\" }}\r\n                            variant=\"outlined\"\r\n                            onClick={this.addButton}\r\n                        >\r\n                            <AddIcon />\r\n                        </Button>\r\n                    </ListItem>\r\n                </List>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    setTimeDelta = (event, newValue) => {\r\n        var v = newValue;\r\n        this.updateButtons(this.state.buttons, v, () => {\r\n            this.setState((state) => {\r\n                state.timeDelta = v;\r\n                return state;\r\n            });\r\n        });\r\n    };\r\n\r\n    valueLabelFormat = (value) => {\r\n        return parseInt(value) >= 0 ? `+${value} ч.` : `${value} ч.`;\r\n    };\r\n\r\n    getMarks = () => {\r\n        return [...Array(25).keys()].map((e, i) => {\r\n            return {\r\n                value: i - 12,\r\n                label: i - 12 >= 0 ? `+${i - 12} ч.` : `${i - 12} ч.`,\r\n            };\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        if (this.state.loaded) {\r\n            return (\r\n                <>\r\n                    <Paper style={{ padding: 40, marginLeft: 5 }}>\r\n                        <Typography>\r\n                            Смещение времени в отсылаемом сигнале (для\r\n                            экспирации к конкретному времени)\r\n                        </Typography>\r\n                        <Slider\r\n                            value={this.state.timeDelta}\r\n                            step={1}\r\n                            marks={this.getMarks()}\r\n                            min={-12}\r\n                            max={12}\r\n                            onChange={this.setTimeDelta}\r\n                            style={{ paddingTop: 20, paddingBottom: 20 }}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                        />\r\n                    </Paper>\r\n                    {this.getButtonsList()}\r\n                </>\r\n            );\r\n        }\r\n        return <></>;\r\n    };\r\n}\r\n\r\nclass AccountContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false,\r\n        };\r\n    }\r\n\r\n    load = () => {\r\n        if (!this.state.loaded)\r\n            API.getMyData((user) => {\r\n                this.setState((state) => {\r\n                    state.key = user.key;\r\n                    state.loaded = true;\r\n                    return state;\r\n                });\r\n            });\r\n    };\r\n\r\n    render = () => {\r\n        this.load();\r\n        if (this.state.loaded) {\r\n            return (\r\n                <>\r\n                    <Card\r\n                        style={{\r\n                            margin: 40,\r\n                            width: 423,\r\n                        }}\r\n                    >\r\n                        <CardHeader\r\n                            avatar={<Avatar src=\"icon_128.png\" />}\r\n                            title={\r\n                                <Typography variant=\"h5\">Trade-S</Typography>\r\n                            }\r\n                            subheader=\"Деавторизация\"\r\n                        />\r\n                        <CardActions style={{ padding: 20 }}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    chrome.storage.local.clear(() => {\r\n                                        window.location.reload();\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Выйти\r\n                            </Button>\r\n                        </CardActions>\r\n                    </Card>\r\n\r\n                    <Divider />\r\n                    <Paper style={{ margin: 40, padding: 40 }}>\r\n                        <TextField\r\n                            style={{ width: \"100%\" }}\r\n                            label=\"Ключ для Trade-S Lite\"\r\n                            value={this.state.key}\r\n                        ></TextField>\r\n                    </Paper>\r\n                    <Divider />\r\n                    <div style={{ padding: 40 }}>\r\n                        <DonatFrame />\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n}\r\n\r\nclass ButtonFormat {\r\n    constructor() {\r\n        this.items = [\r\n            { type: \"ass\" },\r\n            { type: \"exp\" },\r\n            { type: \"dir\" },\r\n            { type: \"text\", text: \"СТАВИМ\" },\r\n        ];\r\n    }\r\n\r\n    restore = (ass, dir, exp, stn, stv, plf) => {\r\n        return this.items\r\n            .map((e) => {\r\n                switch (e.type) {\r\n                    case \"ass\":\r\n                        return ass;\r\n                    case \"dir\":\r\n                        return dir;\r\n                    case \"exp\":\r\n                        return exp;\r\n                    case \"stn\":\r\n                        return stn;\r\n                    case \"stv\":\r\n                        return stv;\r\n                    case \"plf\":\r\n                        return plf;\r\n                    case \"text\":\r\n                        return e.text;\r\n                }\r\n            })\r\n            .join(\" \");\r\n    };\r\n\r\n    add = (type, text) => {\r\n        this.items.push(\r\n            type == text ? { type: type, text: text } : { type: type }\r\n        );\r\n    };\r\n\r\n    insert = (index, type, text) => {\r\n        this.items[index] =\r\n            type == text ? { type: type, text: text } : { type: type };\r\n    };\r\n\r\n    delete = (index) => {\r\n        this.items.splice(index);\r\n    };\r\n\r\n    update = (index, type, text) => {\r\n        this.items[index] =\r\n            type == text ? { type: type, text: text } : { type: type };\r\n    };\r\n\r\n    static fromItems = (items) => {\r\n        var b = new ButtonFormat();\r\n        b.items = items;\r\n        return b;\r\n    };\r\n}\r\n\r\nexport default TradeSContent;\r\n","/*global chrome*/\r\n\r\nimport React from \"react\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport TradeSContent from \"./TradeSContent\";\r\nimport API from \"./API\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nclass CenterView extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    left: \"50%\",\r\n                    top: \"50%\",\r\n                    transform: \"translate(-50%, -50%)\",\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = { open: false, currentPage: 4 };\r\n\r\n        this.state = { registered: false, logined: false };\r\n        this.loadAccount();\r\n        var self = this;\r\n\r\n        chrome.runtime.onMessage.addListener(\r\n            (request, sender, sendResponse) => {\r\n                if (\r\n                    request.userId &&\r\n                    request.accessToken &&\r\n                    request.extension == \"TradeS\"\r\n                ) {\r\n                    sendResponse({});\r\n                    self.loadAccount();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    loadAccount = () => {\r\n        var self = this;\r\n        chrome.storage.local.get([\"userId\", \"settsData\"], (res) => {\r\n            var r = res;\r\n            if (r.settsData && r.settsData.accessToken && r.userId) {\r\n                chrome.storage.local.onChanged.addListener((r) => {\r\n                    r.settsData && API.uploadMySetts();\r\n                });\r\n                this.loadData(r.userId, r.settsData);\r\n            } else {\r\n                r.settsData = r.settsData ? r.settsData : {};\r\n                chrome.storage.local.set({ settsData: r.settsData }, () => {\r\n                    self.setState(\r\n                        (state) => {\r\n                            state.logined = true;\r\n                            state.registered = false;\r\n                            state.accessToken = undefined;\r\n                            state.userId = undefined;\r\n                            return state;\r\n                        },\r\n                        () => {}\r\n                    );\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    loadData = (userId, setts) => {\r\n        var s = setts;\r\n        var self = this;\r\n        self.setState(\r\n            (state) => {\r\n                state.logined = true;\r\n            },\r\n            () => {\r\n                chrome.storage.local.set({ TRSVkLogin: false }, () => {\r\n                    API.downloadMySetts(() => {\r\n                        self.setState((state) => {\r\n                            state.registered = true;\r\n                            state.accessToken = s.accessToken;\r\n                            state.userId = userId;\r\n                            return state;\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    register = () => {\r\n        chrome.storage.local.set({ \"TRSVkLogin\": true }, () => {\r\n            window.open(\r\n                \"https://oauth.vk.com/authorize?client_id=6290333&scope=wall,offline&redirect_uri=http://oauth.vk.com/blank.html&response_type=token&v=5.92\"\r\n            );\r\n        });\r\n    };\r\n\r\n    onPanelSwitch = (open) => (event) => {\r\n        if (open === null) {\r\n            open = !this.state.open;\r\n        }\r\n        if (\r\n            event &&\r\n            event.type === \"keydown\" &&\r\n            (event.key === \"Tab\" || event.key === \"Shift\")\r\n        ) {\r\n            return;\r\n        }\r\n        this.setState((state) => {\r\n            state.open = open;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    home = () => {\r\n        this.setState((state) => {\r\n            state.currentPage = 4;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    authContent = (logined) => {\r\n        if (!logined) {\r\n            return <CircularProgress color=\"#e0f7fa\" />;\r\n        }\r\n        return (\r\n            <Card\r\n                style={{\r\n                    width: 450,\r\n                }}\r\n            >\r\n                <CardHeader\r\n                    avatar={<Avatar src=\"icon_128.png\" />}\r\n                    title={<Typography variant=\"h5\">Trade-S</Typography>}\r\n                    subheader=\"Авторизация\"\r\n                />\r\n                <CardContent\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Typography>\r\n                        Для использования расширения необходимо пройти\r\n                        авторизацию с помощью ВКонтакте.\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={this.register}\r\n                    >\r\n                        Авторизироваться ВКонтакте\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    render = () => {\r\n        if (!this.state.registered) {\r\n            return (\r\n                <Backdrop open={true} style={{ color: \"#e3e5fc\" }}>\r\n                    <CenterView>\r\n                        {this.authContent(this.state.logined)}\r\n                    </CenterView>\r\n                </Backdrop>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            onClick={this.onPanelSwitch(true)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Avatar\r\n                            src=\"icon_128.png\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                            onClick={this.home}\r\n                        />\r\n                        <Typography\r\n                            style={{ cursor: \"pointer\", marginLeft: 10 }}\r\n                            onClick={this.home}\r\n                            variant=\"h6\"\r\n                        >\r\n                            Trade-S\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer\r\n                    open={this.state.open}\r\n                    onOpen={this.onPanelSwitch(true)}\r\n                    onClose={this.onPanelSwitch(false)}\r\n                >\r\n                    <PageMenu page={this} />\r\n                </SwipeableDrawer>\r\n                <TradeSPath currentPage={this.state.currentPage} page={this} />\r\n                <TradeSContent currentPage={this.state.currentPage} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass TradeSPath extends React.Component {\r\n    home = () => {\r\n        this.props.page.setState((state) => {\r\n            state.currentPage = 4;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Breadcrumbs style={{ padding: 20 }} aria-label=\"breadcrumb\">\r\n                <Link style={{ cursor: \"pointer\" }} onClick={this.home}>\r\n                    Trade-S\r\n                </Link>\r\n                <Typography style={{ cursor: \"default\" }}>\r\n                    {\r\n                        [\r\n                            \"Сообщения в чатах группы\",\r\n                            \"Пост на стене группы\",\r\n                            \"Формат сигналов\",\r\n                            \"Дополнительно\",\r\n                            \"\",\r\n                        ][this.props.currentPage]\r\n                    }\r\n                </Typography>\r\n            </Breadcrumbs>\r\n        );\r\n    };\r\n}\r\n\r\nclass PageMenu extends React.Component {\r\n    openMessages = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 0;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openPosts = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 1;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openFormat = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 2;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openAccount = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 3;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <List style={{ marginTop: -8 }}>\r\n                    <ListItem\r\n                        style={{\r\n                            padding: 16,\r\n                            paddingLeft: 25,\r\n                            background: \"#3f51b5\",\r\n                            color: \"white\",\r\n                        }}\r\n                        button\r\n                        key={\"Меню настроек\"}\r\n                        onClick={this.props.page.onPanelSwitch(false)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <ArrowBackIcon style={{ color: \"white\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            style={{ marginLeft: -20 }}\r\n                            primary={\"Меню настроек\"}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <label style={{ textAlign: \"center\" }}>\r\n                    Отправка сигналов в ВК\r\n                </label>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openMessages}\r\n                        key={\"Сообщения в чатах группы\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <EmailIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Сообщения в чатах группы\"} />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openPosts}\r\n                        key={\"Пост на стене группы\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <WallpaperIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Пост на стене группы\"} />\r\n                    </ListItem>\r\n                </List>\r\n\r\n                <Divider />\r\n                <label style={{ textAlign: \"center\" }}>Другие настройки</label>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openFormat}\r\n                        key={\"Формат сигналов\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <RadioButtonCheckedIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Формат сигналов\"} />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openAccount}\r\n                        key={\"Дополнительно\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <AccountBoxIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Дополнительно\"} />\r\n                    </ListItem>\r\n                </List>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Page;\r\n","import React from 'react';\nimport Page from './MainPage'\n\nfunction App() {\n  return (\n    <Page/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}