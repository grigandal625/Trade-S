{"version":3,"sources":["VKMethods.js","TradeSTabs.js","TradeSContent.js","API.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["VKMethods","executed","callback","event","JSON","parse","target","responseText","e","getGroupChats","groupToken","xhr","XMLHttpRequest","open","onload","send","sendMessageToGroupChat","id","message","encodeURIComponent","getUsersGroups","token","getMyGroups","cb","chrome","storage","local","get","res","r","userId","settsData","accessToken","postOnGroupWall","groupId","postOnMyGroupWall","m","APIKeyDialog","props","onOk","state","key","onCancel","keyChanged","currentTarget","newKey","value","setState","render","Dialog","onClose","switchDialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","DialogActions","Button","onClick","color","React","Component","MessagesTab","openDialog","closeDialog","tokenRecieved","gotToken","reload","getMessages","self","data","undefined","messages","platform","updateMessages","toSend","platformMsg","setts","set","loaded","chats","load","result","error","alert","console","log","response","items","filter","conversation","peer","type","map","name","chat_settings","title","selected","includes","toSendChanged","chat","getChatRows","TableRow","TableCell","Switch","checked","align","getChatTable","TableContainer","component","Paper","Table","TableHead","TableBody","CircularProgress","style","padding","List","ListItem","button","ListItemIcon","ListItemText","primary","slice","PostsTab","TradeSContent","currentPage","Typography","OPTabs","useState","setValue","Tabs","newValue","tabChanged","Tab","MessagesContent","index","currentTab","PostsContent","FormatContent","AccountContent","API","recieved","getUserById","obj","method","stringify","getUserByKey","setUserSetts","setUserSettsByKey","resp","uploadMySetts","downloadMySetts","user","onChanged","addListener","CenterView","position","left","top","transform","this","children","Page","loadAccount","loadData","logined","registered","s","TRSVkLogin","register","window","onPanelSwitch","home","authContent","Card","width","CardHeader","avatar","Avatar","src","variant","subheader","CardContent","alignItems","justifyContent","CardActions","AppBar","Toolbar","IconButton","edge","aria-label","cursor","marginLeft","SwipeableDrawer","onOpen","page","Backdrop","runtime","onMessage","request","sender","sendResponse","extension","TradeSPath","Breadcrumbs","Link","PageMenu","openMessages","openPosts","openFormat","openAccount","marginTop","paddingLeft","background","Divider","textAlign","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a306beb3.chunk.js","sourcesContent":["/*global chrome*/\r\n\r\nclass VKMethods {\r\n    static executed = (callback) => (event) => {\r\n        if (callback) {\r\n            try {\r\n                callback(JSON.parse(event.target.responseText));\r\n            } catch (e) {}\r\n        }\r\n    };\r\n\r\n    static getGroupChats = (groupToken, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/messages.getConversations?access_token=${groupToken}&v=5.120`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static sendMessageToGroupChat = (groupToken, id, message, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/messages.send?peer_id=${id}&message=${encodeURIComponent(\r\n                message\r\n            )}&access_token=${groupToken}&v=5.38`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static getUsersGroups = (id, token, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/groups.get?user_id=${id}&filter=admin,editor,moder&extended=1&v=5.92&access_token=${token}`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static getMyGroups = (callback) => {\r\n        var cb = callback\r\n        chrome.storage.local.get(['settsData', 'userId'], (res)=>{\r\n            var r = res;\r\n            VKMethods.getUsersGroups(r.userId, r.settsData.accessToken, cb)\r\n        })\r\n    }\r\n\r\n    static postOnGroupWall = (groupId, token, message, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"POST\",\r\n            `https://api.vk.com/method/wall.post?owner_id=-${groupId}&from_group=1&message=${message}&signed=1&v=5.120&access_token=${token}`,\r\n            true\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static postOnMyGroupWall = (groupId, message, callback) => {\r\n        var cb = callback\r\n        var id = groupId;\r\n        var m = message;\r\n        chrome.storage.local.get(['settsData'], (res)=>{\r\n            var r = res;\r\n            VKMethods.getUsersGroups(id, r.settsData.accessToken, m, cb)\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default VKMethods;\r\n","/*global chrome*/\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport React from \"react\";\r\nimport VKMethods from \"./VKMethods\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nclass APIKeyDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { key: \"\" };\r\n    }\r\n\r\n    onOk = () => {\r\n        this.props.onOk(this.state.key);\r\n    };\r\n\r\n    onCancel = () => {\r\n        this.props.onCancel();\r\n    };\r\n\r\n    keyChanged = (event) => {\r\n        if (event.currentTarget) {\r\n            var newKey = event.currentTarget.value;\r\n            this.setState((state) => {\r\n                state.key = newKey;\r\n                return state;\r\n            });\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Dialog\r\n                open={this.props.open}\r\n                onClose={this.switchDialog}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle>Введите API-ключ группы</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Для обеспечения возможности отправки сообщений в чаты\r\n                        необходимо указать API-ключ группы.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"API-ключ группы\"\r\n                        fullWidth\r\n                        onChange={this.keyChanged}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.onCancel} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={this.onOk} color=\"primary\">\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n}\r\n\r\nclass MessagesTab extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { openDialog: false, gotToken: false, loaded: false };\r\n    }\r\n\r\n    openDialog = () => {\r\n        this.setState((state) => {\r\n            state.openDialog = true;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    closeDialog = () => {\r\n        this.setState((state) => {\r\n            state.openDialog = false;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    tokenRecieved = (token) => {\r\n        this.gotToken(token, this.reload);\r\n    };\r\n\r\n    getMessages = (callback) => {\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\"], (res) => {\r\n            var r = res;\r\n            var data = r.settsData != undefined ? r.settsData : {};\r\n            data.messages = data.messages ? data.messages : [];\r\n            data.messages[self.props.platform] = data.messages[\r\n                self.props.platform\r\n            ]\r\n                ? data.messages[self.props.platform]\r\n                : {};\r\n            try {\r\n                callback(data.messages[self.props.platform], data);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updateMessages = (token, toSend, callback) => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            platformMsg.groupToken = token;\r\n            platformMsg.toSend = toSend;\r\n            setts.messages[this.props.platform] = platformMsg;\r\n            chrome.storage.local.set({ settsData: setts }, () => {\r\n                try {\r\n                    callback(platformMsg, setts);\r\n                } catch (e) {}\r\n            });\r\n        });\r\n    };\r\n\r\n    gotToken = (token, callback) => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            this.updateMessages(token, platformMsg.toSend, () => {\r\n                this.setState(\r\n                    (state) => {\r\n                        state.gotToken = true;\r\n                        return state;\r\n                    },\r\n                    () => {\r\n                        try {\r\n                            callback();\r\n                        } catch (e) {}\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n\r\n    reload = () => {\r\n        this.setState(\r\n            (state) => {\r\n                state.loaded = false;\r\n                state.openDialog = false;\r\n                state.chats = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.load();\r\n            }\r\n        );\r\n    };\r\n\r\n    load = () => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            VKMethods.getGroupChats(platformMsg.groupToken, (result) => {\r\n                if (result.error) {\r\n                    alert(result);\r\n                    console.log(result);\r\n                    return;\r\n                }\r\n                this.setState(\r\n                    (state) => {\r\n                        state.chats = result.response.items\r\n                            .filter((e) => {\r\n                                return e.conversation.peer.type == \"chat\";\r\n                            })\r\n                            .map((e) => {\r\n                                return {\r\n                                    id: e.conversation.peer.id,\r\n                                    name: e.chat_settings.title,\r\n                                    selected: platformMsg.toSend.includes(\r\n                                        e.conversation.peer.id\r\n                                    ),\r\n                                };\r\n                            });\r\n                        state.loaded = true;\r\n                        return state;\r\n                    },\r\n                    () => {\r\n                        this.updateMessages(platformMsg.groupToken, []);\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n\r\n    toSendChanged = (chat) => {\r\n        chat.selected = !chat.selected;\r\n        this.getMessages((platformMsg, setts) => {\r\n            this.updateMessages(\r\n                platformMsg.groupToken,\r\n                this.state.chats\r\n                    .filter((e) =>\r\n                        e.id == chat.id ? chat.selected : e.selected\r\n                    )\r\n                    .map((e) => e.id),\r\n                () => {\r\n                    this.setState((state) => {\r\n                        state.chats = state.chats.map((e) => {\r\n                            return e.id == chat.id ? chat : e;\r\n                        });\r\n                    });\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    getChatRows = () => {\r\n        return this.state.chats.map((e) => {\r\n            return (\r\n                <TableRow>\r\n                    <TableCell>{e.name}</TableCell>\r\n                    <TableCell>\r\n                        <Switch\r\n                            checked={e.selected}\r\n                            color=\"primary\"\r\n                            onChange={this.toSendChanged(e)}\r\n                        />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                this.getMessages((platformMsg) => {\r\n                                    VKMethods.sendMessageToGroupChat(\r\n                                        platformMsg.groupToken,\r\n                                        e.id,\r\n                                        \"Тестовое сообщение\"\r\n                                    );\r\n                                });\r\n                            }}\r\n                        >\r\n                            Тестовое сообщение\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n            );\r\n        });\r\n    };\r\n\r\n    getChatTable = () => {\r\n        if (this.state.loaded) {\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Чат</TableCell>\r\n                                <TableCell>Отправка</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Button onClick={this.reload}>\r\n                                        <RefreshIcon />\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>{this.getChatRows()}</TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n\r\n    render = () => {\r\n        if (this.state.gotToken) {\r\n            return (\r\n                <>\r\n                    <List>\r\n                        <ListItem button onClick={this.openDialog}>\r\n                            <ListItemIcon>\r\n                                <EditIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                primary={\r\n                                    this.state.groupToken.slice(0, 10) + \"...\"\r\n                                }\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                    <APIKeyDialog\r\n                        open={this.state.openDialog}\r\n                        onCancel={this.closeDialog}\r\n                        onOk={this.tokenRecieved}\r\n                    />\r\n                    {this.getChatTable()}\r\n                </>\r\n            );\r\n        }\r\n\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n}\r\n\r\nclass PostsTab extends React.Component {\r\n    render = () => {\r\n        return <> Posts </>;\r\n    };\r\n}\r\n\r\n\r\nexport { MessagesTab, PostsTab };\r\n","/*global chrome*/\r\n\r\nimport React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport {MessagesTab, PostsTab} from \"./TradeSTabs\";\r\n\r\nclass TradeSContent extends React.Component {\r\n    render = () => {\r\n        switch (this.props.currentPage) {\r\n            case 0:\r\n                return <MessagesContent />;\r\n            case 1:\r\n                return <PostsContent />;\r\n            case 2:\r\n                return <FormatContent />;\r\n            case 3:\r\n                return <AccountContent />;\r\n            default:\r\n                return <Typography>Default page</Typography>;\r\n        }\r\n    };\r\n}\r\n\r\nfunction OPTabs(props) {\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        props.tabChanged(newValue);\r\n    };\r\n    return (\r\n        <Paper>\r\n            <Tabs value={value} onChange={handleChange}>\r\n                <Tab label=\"Olymp Trade\" />\r\n                <Tab label=\"Pocket Option\" />\r\n            </Tabs>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nclass MessagesContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { index: 0 };\r\n    }\r\n\r\n    tabChanged = (index) => {\r\n        this.setState((state) => {\r\n            state.index = index;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    currentTab = () => {\r\n        return <MessagesTab platform={this.state.index}/>\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <OPTabs tabChanged={this.tabChanged} />\r\n                {this.currentTab()}\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass PostsContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { index: 0 };\r\n    }\r\n\r\n    tabChanged = (index) => {\r\n        this.setState((state) => {\r\n            state.index = index;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <OPTabs tabChanged={this.tabChanged} />\r\n                <PostsTab platform={this.state.index} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass FormatContent extends React.Component {\r\n    render = () => {\r\n        return <>format</>;\r\n    };\r\n}\r\n\r\nclass AccountContent extends React.Component {\r\n    render = () => {\r\n        return <>account</>;\r\n    };\r\n}\r\n\r\nexport default TradeSContent;\r\n","/*global chrome*/\r\n\r\nclass API {\r\n    static recieved = (callback) => (event) => {\r\n        try {\r\n            callback(JSON.parse(event.currentTarget.responseText));\r\n        } catch (e) {}\r\n    };\r\n\r\n    static getUserById = (id, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"user\",\r\n            data: { id: id },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static getUserByKey = (key, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"user\",\r\n            data: { key: key },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static setUserSetts = (id, setts, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"setts\",\r\n            data: { id: id, setts: setts },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static setUserSettsByKey = (key, setts, callback) => {\r\n        API.getUserByKey(key, (resp) => {\r\n            API.setUserSetts(resp.id, setts, callback);\r\n        });\r\n    };\r\n\r\n    static uploadMySetts = (callback) => {\r\n        var cb = callback\r\n        chrome.storage.local.get([\"settsData\", \"userId\"], (res) => {\r\n            var r = res;\r\n            if (r.userId && r.settsData) {\r\n                var setts = {\r\n                    accessToken: r.settsData.accessToken\r\n                        ? r.settsData.accessToken\r\n                        : undefined,\r\n                    messages: r.settsData.messages\r\n                        ? r.settsData.messages.map((e) => {\r\n                              return {\r\n                                  groupToken: e.groupToken\r\n                                      ? e.groupToken\r\n                                      : undefined,\r\n                              };\r\n                          })\r\n                        : undefined,\r\n                };\r\n                API.setUserSetts(r.userId, setts, cb);\r\n            }\r\n        });\r\n    };\r\n\r\n    static downloadMySetts = (callback) => {\r\n        var cb = callback;\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\", \"userId\"], (res) => {\r\n            var r = res;\r\n            if (r.userId) {\r\n                API.getUserById(r.userId, (user) => {\r\n                    var setts = r.settsData;\r\n                    setts.messages = user.setts.messages;\r\n                    setts.accessToken = user.setts.accessToken;\r\n                    chrome.storage.local.set({ settsData: setts }, () => {\r\n                        try {\r\n                            cb(setts);\r\n                        } catch (e) {}\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nexport default API;\r\n","/*global chrome*/\r\n\r\nimport React from \"react\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport TradeSContent from \"./TradeSContent\";\r\nimport API from \"./API\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nchrome.storage.local.onChanged.addListener(()=>{\r\n    API.uploadMySetts();\r\n})\r\n\r\nclass CenterView extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    left: \"50%\",\r\n                    top: \"50%\",\r\n                    transform: \"translate(-50%, -50%)\",\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass DonatFrame extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <iframe\r\n                src=\"https://money.yandex.ru/quickpay/shop-widget?writer=seller&targets=%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0%20Trade-S&targets-hint=&default-sum=&button-text=13&payment-type-choice=on&mobile-payment-type-choice=on&hint=&successURL=&quickpay=shop&account=4100115567443945\"\r\n                width=\"423\"\r\n                height=\"222\"\r\n                frameborder=\"0\"\r\n                allowtransparency=\"true\"\r\n                scrolling=\"no\"\r\n            ></iframe>\r\n        );\r\n    };\r\n}\r\n\r\nclass Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = { open: false, currentPage: 4 };\r\n\r\n        this.state = { registered: false, logined: false };\r\n        this.loadAccount();\r\n        var self = this;\r\n\r\n        chrome.runtime.onMessage.addListener(\r\n            (request, sender, sendResponse) => {\r\n                if (\r\n                    request.userId &&\r\n                    request.accessToken &&\r\n                    request.extension == \"TradeS\"\r\n                ) {\r\n                    sendResponse({});\r\n                    self.loadAccount();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    loadAccount = () => {\r\n        var self = this;\r\n        chrome.storage.local.get([\"userId\", \"settsData\"], (res) => {\r\n            var r = res;\r\n            if (r.settsData && r.settsData.accessToken && r.userId) {\r\n                this.loadData(r.userId, r.settsData);\r\n            } else {\r\n                r.settsData = r.settsData ? r.settsData : {};\r\n                chrome.storage.local.set({ settsData: r.settsData }, () => {\r\n                    self.setState((state) => {\r\n                        state.logined = false;\r\n                        state.registered = false;\r\n                        state.accessToken = undefined;\r\n                        state.userId = undefined;\r\n                        return state;\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    loadData = (userId, setts) => {\r\n        var s = setts;\r\n        var self = this;\r\n        self.setState(\r\n            (state) => {\r\n                state.logined = true;\r\n            },\r\n            () => {\r\n                chrome.storage.local.set({TRSVkLogin: false}, ()=>{\r\n                    API.uploadMySetts(() => {\r\n                        self.setState((state) => {\r\n                            state.registered = true;\r\n                            state.accessToken = s.accessToken;\r\n                            state.userId = userId;\r\n                            return state;\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    register = () => {\r\n        chrome.storage.local.set({ \"TRSVkLogin\": true }, () => {\r\n            window.open(\r\n                \"https://oauth.vk.com/authorize?client_id=6290333&scope=wall,offline&redirect_uri=http://oauth.vk.com/blank.html&response_type=token&v=5.92\"\r\n            );\r\n        });\r\n    };\r\n\r\n    onPanelSwitch = (open) => (event) => {\r\n        if (open === null) {\r\n            open = !this.state.open;\r\n        }\r\n        if (\r\n            event &&\r\n            event.type === \"keydown\" &&\r\n            (event.key === \"Tab\" || event.key === \"Shift\")\r\n        ) {\r\n            return;\r\n        }\r\n        this.setState((state) => {\r\n            state.open = open;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    home = () => {\r\n        this.setState((state) => {\r\n            state.currentPage = 4;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    authContent = (logined) => {\r\n        if (!logined) {\r\n            return (\r\n                <Card\r\n                    style={{\r\n                        width: 450,\r\n                    }}\r\n                >\r\n                    <CardHeader\r\n                        avatar={<Avatar src=\"icon_128.png\" />}\r\n                        title={<Typography variant=\"h5\">Trade-S</Typography>}\r\n                        subheader=\"Авторизация\"\r\n                    />\r\n                    <CardContent\r\n                        style={{\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Typography>\r\n                            Для использования расширения необходимо пройти\r\n                            авторизацию с помощью ВКонтакте.\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions\r\n                        style={{\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            onClick={this.register}\r\n                        >\r\n                            Авторизироваться ВКонтакте\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            );\r\n        } else {\r\n            return <CircularProgress />;\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        if (!this.state.registered) {\r\n            return (\r\n                <Backdrop open={true} style={{ color: \"#e3e5fc\" }}>\r\n                    <CenterView>\r\n                        {this.authContent(this.state.logined)}\r\n                    </CenterView>\r\n                </Backdrop>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            onClick={this.onPanelSwitch(true)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Avatar\r\n                            src=\"icon_128.png\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                            onClick={this.home}\r\n                        />\r\n                        <Typography\r\n                            style={{ cursor: \"pointer\", marginLeft: 10 }}\r\n                            onClick={this.home}\r\n                            variant=\"h6\"\r\n                        >\r\n                            Trade-S\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer\r\n                    open={this.state.open}\r\n                    onOpen={this.onPanelSwitch(true)}\r\n                    onClose={this.onPanelSwitch(false)}\r\n                >\r\n                    <PageMenu page={this} />\r\n                </SwipeableDrawer>\r\n                <TradeSPath currentPage={this.state.currentPage} page={this} />\r\n                <TradeSContent currentPage={this.state.currentPage} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass TradeSPath extends React.Component {\r\n    home = () => {\r\n        this.props.page.setState((state) => {\r\n            state.currentPage = 4;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Breadcrumbs style={{ padding: 20 }} aria-label=\"breadcrumb\">\r\n                <Link style={{ cursor: \"pointer\" }} onClick={this.home}>\r\n                    Trade-S\r\n                </Link>\r\n                <Typography style={{ cursor: \"default\" }}>\r\n                    {\r\n                        [\r\n                            \"Сообщения в чатах группы\",\r\n                            \"Пост на стене группы\",\r\n                            \"Формат сигналов\",\r\n                            \"Дополнительно\",\r\n                            \"\",\r\n                        ][this.props.currentPage]\r\n                    }\r\n                </Typography>\r\n            </Breadcrumbs>\r\n        );\r\n    };\r\n}\r\n\r\nclass PageMenu extends React.Component {\r\n    openMessages = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 0;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openPosts = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 1;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openFormat = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 2;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openAccount = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 3;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <List style={{ marginTop: -8 }}>\r\n                    <ListItem\r\n                        style={{\r\n                            padding: 16,\r\n                            paddingLeft: 25,\r\n                            background: \"#3f51b5\",\r\n                            color: \"white\",\r\n                        }}\r\n                        button\r\n                        key={\"Меню настроек\"}\r\n                        onClick={this.props.page.onPanelSwitch(false)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <ArrowBackIcon style={{ color: \"white\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            style={{ marginLeft: -20 }}\r\n                            primary={\"Меню настроек\"}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <label style={{ textAlign: \"center\" }}>\r\n                    Отправка сигналов в ВК\r\n                </label>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openMessages}\r\n                        key={\"Сообщения в чатах группы\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <EmailIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Сообщения в чатах группы\"} />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openPosts}\r\n                        key={\"Пост на стене группы\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <WallpaperIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Пост на стене группы\"} />\r\n                    </ListItem>\r\n                </List>\r\n\r\n                <Divider />\r\n                <label style={{ textAlign: \"center\" }}>Другие настройки</label>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openFormat}\r\n                        key={\"Формат сигналов\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <RadioButtonCheckedIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Формат сигналов\"} />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openAccount}\r\n                        key={\"Дополнительно\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <AccountBoxIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Дополнительно\"} />\r\n                    </ListItem>\r\n                </List>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Page;\r\n","import React from 'react';\nimport Page from './MainPage'\n\nfunction App() {\n  return (\n    <Page/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}