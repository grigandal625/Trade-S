{"version":3,"sources":["VKMethods.js","TradeSTabs.js","TradeSContent.js","API.js","MainPage.js","App.js","serviceWorker.js","index.js"],"names":["VKMethods","executed","callback","event","JSON","parse","target","responseText","e","getGroupChats","groupToken","xhr","XMLHttpRequest","open","onload","send","sendMessageToGroupChat","id","message","encodeURIComponent","getUsersGroups","token","getMyGroups","cb","chrome","storage","local","get","res","r","userId","settsData","accessToken","postOnGroupWall","groupId","postOnMyGroupWall","m","APIKeyDialog","props","onOk","state","key","onCancel","keyChanged","currentTarget","newKey","value","setState","render","Dialog","onClose","switchDialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","fullWidth","onChange","DialogActions","Button","onClick","color","React","Component","MessagesTab","build","platform","gotToken","loaded","undefined","rebuild","getMessages","platformMsg","setts","reload","openDialog","closeDialog","self","data","messages","updateMessages","toSend","set","chats","load","p","result","error","alert","console","log","response","items","filter","c","conversation","peer","type","map","chat","name","chat_settings","title","selected","includes","toSendChanged","getChatRows","TableRow","TableCell","Switch","checked","align","getChatTable","TableContainer","component","Paper","Table","TableHead","TableBody","CircularProgress","style","padding","List","ListItem","button","ListItemIcon","ListItemText","primary","slice","PostsTab","groups","getPosts","posts","updatePosts","newPosts","group","getGropuRows","TradeSContent","currentPage","Typography","OPTabs","useState","setValue","Tabs","newValue","tabChanged","Tab","MessagesContent","index","currentTab","PostsContent","FormatContent","getButtons","buttons","text","updateButtons","addButton","push","deleteButton","splice","getFormatAvatar","getFormatText","format","formatTypes","textFormatChanged","formatIndex","buttonIndex","v","getFormatContent","size","closeMenus","buttonMenus","ref","onAddItem","onDeleteItem","itemIndex","openAddItemMenu","t","addItem","itemAdder","createRef","variant","Popper","anchorEl","role","transition","ClickAwayListener","onClickAway","MenuList","autoFocusItem","MenuItem","getButtonConstructor","preview","ButtonFormat","fromItems","restore","ButtonGroup","Breadcrumbs","width","separator","i","getButtonsList","Divider","AccountContent","ass","dir","exp","stn","stv","join","add","insert","delete","update","this","b","API","recieved","authorize","obj","method","stringify","getUserById","getUserByKey","setUserSetts","setUserSettsByKey","resp","uploadMySetts","downloadMySetts","user","CenterView","position","left","top","transform","children","Page","loadAccount","onChanged","addListener","loadData","logined","registered","s","TRSVkLogin","register","window","onPanelSwitch","home","authContent","Card","CardHeader","avatar","Avatar","src","subheader","CardContent","alignItems","justifyContent","CardActions","AppBar","Toolbar","IconButton","edge","aria-label","cursor","marginLeft","SwipeableDrawer","onOpen","page","Backdrop","runtime","onMessage","request","sender","sendResponse","extension","TradeSPath","Link","PageMenu","openMessages","openPosts","openFormat","openAccount","marginTop","paddingLeft","background","textAlign","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"63BAEMA,G,kCAAAA,GACKC,SAAW,SAACC,GAAD,OAAc,SAACC,GAC7B,GAAID,EACA,IACIA,EAASE,KAAKC,MAAMF,EAAMG,OAAOC,eACnC,MAAOC,OALfR,GASKS,cAAgB,SAACC,EAAYR,GAChC,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KACA,MADJ,2EAEwEH,EAFxE,aAIAC,EAAIG,OAASd,GAAUC,SAASC,GAChCS,EAAII,QAhBNf,GAmBKgB,uBAAyB,SAACN,EAAYO,EAAIC,EAAShB,GACtD,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KACA,MADJ,0DAEuDI,EAFvD,oBAEqEE,mBAC7DD,GAHR,yBAIsBR,EAJtB,YAMAC,EAAIG,OAASd,GAAUC,SAASC,GAChCS,EAAII,QA5BNf,GA+BKoB,eAAiB,SAACH,EAAII,EAAOnB,GAChC,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KACA,MADJ,uDAEoDI,EAFpD,qEAEmHI,IAEnHV,EAAIG,OAASd,GAAUC,SAASC,GAChCS,EAAII,QAtCNf,GAyCKsB,YAAc,SAACpB,GAClB,IAAIqB,EAAKrB,EACTsB,OAAOC,QAAQC,MAAMC,IAAI,CAAC,YAAa,WAAW,SAACC,GAC/C,IAAIC,EAAID,EACR5B,GAAUoB,eAAeS,EAAEC,OAAQD,EAAEE,UAAUC,YAAaT,OA7ClEvB,GAiDKiC,gBAAkB,SAACC,EAASb,EAAOH,EAAShB,GAC/C,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KACA,OADJ,wDAEqDqB,EAFrD,iCAEqFhB,EAFrF,0CAE8HG,IAC1H,GAEJV,EAAIG,OAASd,GAAUC,SAASC,GAChCS,EAAII,QAzDNf,GA4DKmC,kBAAoB,SAACD,EAAShB,EAAShB,GAC1C,IAAIqB,EAAKrB,EACLe,EAAKiB,EACLE,EAAIlB,EACRM,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAAc,SAACC,GAErC5B,GAAUiC,gBAAgBhB,EADlBW,EACwBG,UAAUC,YAAaI,EAAGb,OAMvDvB,U,UC9CTqC,G,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,KAAO,WACH,EAAKD,MAAMC,KAAK,EAAKC,MAAMC,MANZ,EASnBC,SAAW,WACP,EAAKJ,MAAMI,YAVI,EAanBC,WAAa,SAACxC,GACV,GAAIA,EAAMyC,cAAe,CACrB,IAAIC,EAAS1C,EAAMyC,cAAcE,MACjC,EAAKC,UAAS,SAACP,GAEX,OADAA,EAAMC,IAAMI,EACLL,OAlBA,EAuBnBQ,OAAS,WACL,OACI,kBAACC,GAAA,EAAD,CACIpC,KAAM,EAAKyB,MAAMzB,KACjBqC,QAAS,EAAKC,aACdC,kBAAgB,qBAEhB,kBAACC,GAAA,EAAD,qHACA,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,odAIA,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPC,MAAM,oEACNC,WAAS,EACTC,SAAU,EAAKlB,cAGvB,kBAACmB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAQC,QAAS,EAAKtB,SAAUuB,MAAM,WAAtC,UAGA,kBAACF,GAAA,EAAD,CAAQC,QAAS,EAAKzB,KAAM0B,MAAM,WAAlC,SA9CZ,EAAKzB,MAAQ,CAAEC,IAAK,IAFL,E,UADIyB,IAAMC,WA0D3BC,G,kDACF,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IASV+B,MAAQ,WACJ,OAAO,EAAK7B,MAAM8B,UAAY,EAAKhC,MAAMgC,SACnC,EAAKvB,UACD,SAACP,EAAOF,GAKJ,OAJAE,EAAM+B,UAAW,EACjB/B,EAAM8B,SAAWhC,EAAMgC,SACvB9B,EAAMgC,QAAS,EACfhC,EAAM9B,gBAAa+D,EACZjC,KAEX,WACI,EAAKkC,aAGb,EAAKA,WAxBI,EA2BnBA,QAAU,WACN,OACK,EAAKlC,MAAM+B,UACZ,EAAKI,aAAY,SAACC,EAAaC,GAC3B,OACID,EAAYlE,YACZ,EAAK6D,SAASK,EAAYlE,WAAY,EAAKoE,YAjCxC,EAuCnBC,WAAa,WACT,EAAKhC,UAAS,SAACP,GAEX,OADAA,EAAMuC,YAAa,EACZvC,MA1CI,EA8CnBwC,YAAc,WACV,EAAKjC,UAAS,SAACP,GAEX,OADAA,EAAMuC,YAAa,EACZvC,MAjDI,EAqDnBmC,YAAc,SAACzE,GACX,IAAI+E,EAAI,eACRzD,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAAc,SAACC,GACrC,IAAIC,EAAID,EACJsD,OAAsBT,GAAf5C,EAAEE,UAAyBF,EAAEE,UAAY,GACpDmD,EAAKC,SAAWD,EAAKC,SAAWD,EAAKC,SAAW,GAChDD,EAAKC,SAASF,EAAKzC,MAAM8B,UAAYY,EAAKC,SACtCF,EAAKzC,MAAM8B,UAETY,EAAKC,SAASF,EAAKzC,MAAM8B,UACzB,GACN,IACIpE,EAASgF,EAAKC,SAASF,EAAKzC,MAAM8B,UAAWY,GAC/C,MAAO1E,SAlEE,EAsEnB4E,eAAiB,SAAC/D,EAAOgE,EAAQnF,GAC7B,EAAKyE,aAAY,SAACC,EAAaC,GAC3BD,EAAYlE,WAAaW,EACzBuD,EAAYS,OAASA,EACrBR,EAAMM,SAAS,EAAK7C,MAAMgC,UAAYM,EACtCpD,OAAOC,QAAQC,MAAM4D,IAAI,CAAEvD,UAAW8C,IAAS,WAC3C,IACI3E,EAAS0E,EAAaC,GACxB,MAAOrE,YA9EF,EAmFnB+D,SAAW,SAAClD,EAAOnB,GACf,EAAKyE,aAAY,SAACC,EAAaC,GAC3B,EAAKO,eAAe/D,EAAOuD,EAAYS,QAAQ,WAC3C,EAAKtC,UACD,SAACP,GAIG,OAHAA,EAAM+B,UAAW,EACjB/B,EAAM9B,WAAaW,EACnBmB,EAAMuC,YAAa,EACZvC,KAEX,WACI,IACItC,EAASmB,EAAOuD,EAAaC,GAC/B,MAAOrE,eAhGV,EAuGnBsE,OAAS,WACL,EAAK/B,UACD,SAACP,GAIG,OAHAA,EAAMgC,QAAS,EACfhC,EAAMuC,YAAa,EACnBvC,EAAM+C,WAAQd,EACPjC,KAEX,WACI,EAAKgD,WAhHE,EAqHnBA,KAAO,WACH,EAAKb,aAAY,SAACC,EAAaC,GAC3B,IAAIY,EAAI,CACJ/E,WAAYkE,EAAYlE,WACxB2E,OAAQT,EAAYS,OAAST,EAAYS,OAAS,IAEtDrF,GAAUS,cAAcgF,EAAE/E,YAAY,SAACgF,GAC/BA,EAAOC,QACPC,MAAMF,GACNG,QAAQC,IAAIJ,IAEhB,EAAK3C,UACD,SAACP,GAiBG,OAhBAiD,EAAEJ,OAASI,EAAEJ,OAASI,EAAEJ,OAAS,GACjC7C,EAAM+C,MAAQG,EAAOK,SAASC,MACzBC,QAAO,SAACC,GACL,MAAmC,QAA5BA,EAAEC,aAAaC,KAAKC,QAE9BC,KAAI,SAACC,GACF,MAAO,CACHtF,GAAIsF,EAAKJ,aAAaC,KAAKnF,GAC3BuF,KAAMD,EAAKJ,aAAaM,cAAcC,MACtCC,SAAUlB,EAAEJ,OAAOuB,SACfL,EAAKJ,aAAaC,KAAKnF,QAIvCuB,EAAMgC,QAAS,EAERhC,KAEX,WACI,EAAK4C,eACDR,EAAYlE,WACZ,EAAK8B,MAAM+C,MACNU,QAAO,SAACzF,GAAD,OAAOA,EAAEmG,YAChBL,KAAI,SAAC9F,GAAD,OAAOA,EAAES,iBAzJvB,EAiKnB4F,cAAgB,SAACN,GAAD,OAAU,SAACpG,GACvBoG,EAAKI,UAAYJ,EAAKI,SACtB,EAAKhC,aAAY,SAACC,EAAaC,GAC3B,EAAKO,eACDR,EAAYlE,WACZ,EAAK8B,MAAM+C,MACNU,QAAO,SAACzF,GAAD,OACJA,EAAES,IAAMsF,EAAKtF,GAAKsF,EAAKI,SAAWnG,EAAEmG,YAEvCL,KAAI,SAAC9F,GAAD,OAAOA,EAAES,OAClB,WACI,EAAK8B,UAAS,SAACP,GAIX,OAHAA,EAAM+C,MAAQ/C,EAAM+C,MAAMe,KAAI,SAAC9F,GAC3B,OAAOA,EAAES,IAAMsF,EAAKtF,GAAKsF,EAAO/F,KAE7BgC,aAhLR,EAuLnBsE,YAAc,WACV,OAAO,EAAKtE,MAAM+C,MAAMe,KAAI,SAAC9F,GACzB,OACI,kBAACuG,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KAAYxG,EAAEgG,MACd,kBAACQ,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,QAAS1G,EAAEmG,SACX1C,MAAM,UACNJ,SAAU,EAAKgD,cAAcrG,MAGrC,kBAACwG,GAAA,EAAD,CAAWG,MAAM,SACb,kBAACpD,GAAA,EAAD,CACIC,QAAS,WACL,EAAKW,aAAY,SAACC,GACd5E,GAAUgB,uBACN4D,EAAYlE,WACZF,EAAES,GACF,gHANhB,iHApMD,EAuNnBmG,aAAe,WACX,OAAI,EAAK5E,MAAMgC,OAEP,kBAAC6C,GAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACV,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,2BACA,kBAACA,GAAA,EAAD,yDACA,kBAACA,GAAA,EAAD,CAAWG,MAAM,SACb,kBAACpD,GAAA,EAAD,CAAQC,QAAS,EAAKc,QAClB,kBAAC,KAAD,UAKhB,kBAAC4C,GAAA,EAAD,KAAY,EAAKZ,iBAK1B,kBAACa,EAAA,EAAD,CAAkBC,MAAO,CAAEC,QAAS,OA5O5B,EA+OnB7E,OAAS,WAEL,OADA,EAAKqB,QACD,EAAK7B,MAAM+B,SAEP,oCACI,kBAACuD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAAChE,QAAS,EAAKe,YAC3B,kBAACkD,EAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAACC,EAAA,EAAD,CACIC,QACI,EAAK3F,MAAM9B,WAAW0H,MAAM,EAAG,IAAM,UAKrD,kBAAC,GAAD,CACIvH,KAAM,EAAK2B,MAAMuC,WACjBrC,SAAU,EAAKsC,YACfzC,KAAM,SAAClB,GACH,EAAKkD,SAASlD,EAAO,EAAKyD,WAGjC,EAAKsC,qBAGgB3C,GAAvB,EAAKjC,MAAM+B,SAEd,oCACI,kBAACuD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAAChE,QAAS,EAAKe,YAC3B,kBAACkD,EAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAS,mHAG/B,kBAAC,GAAD,CACItH,KAAM,EAAK2B,MAAMuC,WACjBrC,SAAU,EAAKsC,YACfzC,KAAM,SAAClB,GACH,EAAKkD,SAASlD,EAAO,EAAKyD,YAMvC,kBAAC6C,EAAA,EAAD,CAAkBC,MAAO,CAAEC,QAAS,OA7R3C,EAAKrF,MAAQ,CACT8B,SAAU,EAAKhC,MAAMgC,SACrBS,YAAY,EACZR,UAAU,EACVC,QAAQ,GANG,E,UADGN,IAAMC,WAoS1BkE,G,kDACF,WAAY/F,GAAQ,IAAD,8BACf,cAAMA,IAQV+B,MAAQ,WACJ,OAAO,EAAK7B,MAAM8B,UAAY,EAAKhC,MAAMgC,SACnC,EAAKQ,cACLL,GAZS,EAenBK,OAAS,WACL,EAAK/B,UACD,SAACP,GAIG,OAHAA,EAAMgC,QAAS,EACfhC,EAAM8F,YAAS7D,EACfjC,EAAM8B,SAAW,EAAKhC,MAAMgC,SACrB9B,KAEX,WACI,EAAKgD,WAxBE,EA6BnBA,KAAO,WACH,EAAK+C,UAAS,SAACC,EAAO3D,GAClB,IAAIY,EAAI+C,EAAQA,EAAMlC,KAAI,SAAC9F,GAAD,OAAOA,KAAK,GACtCR,GAAUsB,aAAY,SAACoE,GACnB,GAAIA,EAAOC,MAGP,OAFAC,MAAMF,QACNG,QAAQC,IAAIJ,GAGhB,EAAK3C,UAAS,SAACP,GAkBX,OAjBAA,EAAMgC,QAAS,EACfhC,EAAM8F,OAAS5C,EAAOK,SAASC,MAAMM,KACjC,SAAC9F,GACG,MAAO,CACHS,GAAIT,EAAES,GACNuF,KAAMhG,EAAEgG,KACRG,SAAUlB,EAAEmB,SAASpG,EAAES,QAG/B,WACI,EAAKwH,YACD,EAAKjG,MAAM8F,OACNrC,QAAO,SAACzF,GAAD,OAAOA,EAAEmG,YAChBL,KAAI,SAAC9F,GAAD,OAAOA,EAAES,UAIvBuB,YAxDJ,EA8DnB+F,SAAW,SAACrI,GACR,IAAIqB,EAAKrB,EACL+E,EAAI,eACRzD,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAAc,SAACE,GACrC,IAAI2G,EACA3G,EAAEE,UAAUyG,OAAS3G,EAAEE,UAAUyG,MAAMvD,EAAKzC,MAAM8B,UAC5CzC,EAAEE,UAAUyG,MAAMvD,EAAKzC,MAAM8B,UAC7B,GACV,IACI/C,EAAGiH,EAAO3G,EAAEE,WACd,MAAOvB,SAxEE,EA4EnBiI,YAAc,SAACC,EAAUxI,GACrB,EAAKqI,UAAS,SAACC,EAAO3D,GAClB,IAAItD,EAAKrB,EACT2E,EAAM2D,MAAQ3D,EAAM2D,MAAQ3D,EAAM2D,MAAQ,GAC1C3D,EAAM2D,MAAM,EAAKhG,MAAM8B,UAAYoE,EACnClH,OAAOC,QAAQC,MAAM4D,IAAI,CAAEvD,UAAW8C,IAAS,WAC3C,IACItD,EAAGsD,GACL,MAAOrE,YApFF,EAyFnBqG,cAAgB,SAAC8B,GAAD,OAAW,SAACxI,GACxBwI,EAAMhC,UAAYgC,EAAMhC,SAExB,EAAK8B,YACD,EAAKjG,MAAM8F,OACNrC,QAAO,SAACzF,GAAD,OAAQA,EAAES,IAAM0H,EAAM1H,GAAK0H,EAAMhC,SAAWnG,EAAEmG,YACrDL,KAAI,SAAC9F,GAAD,OAAOA,EAAES,OAClB,WACI,EAAK8B,UAAS,SAACP,GAKX,OAJAA,EAAMgC,QAAS,EACfhC,EAAM8F,OAAS9F,EAAM8F,OAAOhC,KAAI,SAAC9F,GAC7B,OAAOA,EAAES,IAAM0H,EAAM1H,GAAK0H,EAAQnI,KAE/BgC,UAtGJ,EA4GnBoG,aAAe,WACX,OAAO,EAAKpG,MAAM8F,OAAOhC,KAAI,SAAC9F,GAC1B,OACI,kBAACuG,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KAAYxG,EAAEgG,MACd,kBAACQ,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CACIC,QAAS1G,EAAEmG,SACX1C,MAAM,UACNJ,SAAU,EAAKgD,cAAcrG,MAGrC,kBAACwG,GAAA,EAAD,CAAWG,MAAM,SACb,kBAACpD,GAAA,EAAD,CACIC,QAAS,WACLhE,GAAUmC,kBACN3B,EAAES,GACF,+EAJZ,mFAzHD,EAyInB+B,OAAS,WAEL,OADA,EAAKqB,QACD,EAAK7B,MAAMgC,OAEP,kBAAC6C,GAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,kBAACV,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,6CACA,kBAACA,GAAA,EAAD,yDACA,kBAACA,GAAA,EAAD,CAAWG,MAAM,SACb,kBAACpD,GAAA,EAAD,CAAQC,QAAS,EAAKc,QAClB,kBAAC,KAAD,UAKhB,kBAAC4C,GAAA,EAAD,KAAY,EAAKkB,kBAK1B,kBAACjB,EAAA,EAAD,CAAkBC,MAAO,CAAEC,QAAS,OA7J3C,EAAKrF,MAAQ,CACTgC,QAAQ,EACRF,UAAW,EACXgE,YAAQ7D,GALG,E,UADAP,IAAMC,W,UCrVvB0E,G,4MACF7F,OAAS,WACL,OAAQ,EAAKV,MAAMwG,aACf,KAAK,EACD,OAAO,kBAAC,GAAD,MACX,KAAK,EACD,OAAO,kBAAC,GAAD,MACX,KAAK,EACD,OAAO,kBAAC,GAAD,MACX,KAAK,EACD,OAAO,kBAAC,GAAD,MACX,QACI,OAAO,kBAACC,EAAA,EAAD,uB,YAZK7E,IAAMC,WAiBlC,SAAS6E,GAAO1G,GAAQ,IAAD,EACO4B,IAAM+E,SAAS,GADtB,mBACZnG,EADY,KACLoG,EADK,KAMnB,OACI,kBAAC3B,EAAA,EAAD,KACI,kBAAC4B,EAAA,EAAD,CAAMrG,MAAOA,EAAOe,SANP,SAAC1D,EAAOiJ,GACzBF,EAASE,GACT9G,EAAM+G,WAAWD,KAKT,kBAACE,EAAA,EAAD,CAAK3F,MAAM,gBACX,kBAAC2F,EAAA,EAAD,CAAK3F,MAAM,oB,IAMrB4F,G,kDACF,WAAYjH,GAAQ,IAAD,8BACf,cAAMA,IAIV+G,WAAa,SAACG,GACV,EAAKzG,UAAS,SAACP,GAEX,OADAA,EAAMgH,MAAQA,EACPhH,MARI,EAYnBiH,WAAa,WACT,OAAO,kBAAC,GAAD,CAAanF,SAAU,EAAK9B,MAAMgH,SAb1B,EAgBnBxG,OAAS,WACL,OACI,oCACI,kBAACgG,GAAD,CAAQK,WAAY,EAAKA,aACxB,EAAKI,eAlBd,EAAKjH,MAAQ,CAAEgH,MAAO,GAFP,E,UADOtF,IAAMC,WA2B9BuF,G,kDACF,WAAYpH,GAAQ,IAAD,8BACf,cAAMA,IAIV+G,WAAa,SAACG,GACV,EAAKzG,UAAS,SAACP,GAEX,OADAA,EAAMgH,MAAQA,EACPhH,MARI,EAYnBQ,OAAS,WACL,OACI,oCACI,kBAACgG,GAAD,CAAQK,WAAY,EAAKA,aACzB,kBAAC,GAAD,CAAU/E,SAAU,EAAK9B,MAAMgH,UAdvC,EAAKhH,MAAQ,CAAEgH,MAAO,GAFP,E,UADItF,IAAMC,WAuB3BwF,G,kDACF,WAAYrH,GAAQ,IAAD,8BACf,cAAMA,IAKVsH,WAAa,SAAC1J,GACF,eAAR,IACIqB,EAAKrB,EACTsB,OAAOC,QAAQC,MAAMC,IAAI,CAAC,YAAY,SAACE,GACnC,IAAIgI,EAAUhI,EAAEgI,QACVhI,EAAEgI,QACF,CACI,CACI,CAAExD,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OAAQyD,KAAM,+CAE1B,CACI,CAAEzD,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OAAQyD,KAAM,6CAGpC,IACIvI,EAAGsI,GACL,MAAOrJ,SA5BE,EAgCnBuJ,cAAgB,SAACF,EAAS3J,GACtB,IAAIqB,EAAKrB,EACTsB,OAAOC,QAAQC,MAAM4D,IAAI,CAAEuE,QAASA,IAAW,WAC3C,IACItI,EAAGsI,GACL,MAAOrJ,SArCE,EAyCnBgF,KAAO,WACH,EAAKoE,YAAW,SAACC,GACb,EAAK9G,UAAS,SAACP,GAGX,OAFAA,EAAMqH,QAAUA,EAChBrH,EAAMgC,QAAS,EACRhC,SA9CA,EAmDnBwH,UAAY,WACR,EAAKJ,YAAW,SAACC,GACbA,EAAQI,KAAK,CAAC,CAAE5D,KAAM,OAAQyD,KAAM,0CACpC,EAAKC,cAAcF,GAAS,SAACA,GACzB,EAAK9G,UAAS,SAACP,GAEX,OADAA,EAAMqH,QAAUA,EACTrH,YAzDJ,EA+DnB0H,aAAe,SAACV,GACZ,EAAKI,YAAW,SAACC,GACbA,EAAQM,OAAOX,EAAO,GACtB,EAAKO,cAAcF,GAAS,SAACA,GACzB,EAAK9G,UAAS,SAACP,GAEX,OADAA,EAAMqH,QAAUA,EACTrH,YArEJ,EA2EnB4H,gBAAkB,SAAC/D,GACf,OAAQA,GACJ,IAAK,MACD,OAAO,kBAAC,IAAD,MACX,IAAK,MACD,OAAO,kBAAC,KAAD,MACX,IAAK,MACD,OAAO,kBAAC,KAAD,MACX,IAAK,MAEL,IAAK,MACD,OAAO,kBAAC,KAAD,MACX,IAAK,OACD,OAAO,kBAAC,KAAD,QAxFA,EA4FnBgE,cAAgB,SAACC,GACb,OAAQA,EAAOjE,MACX,IAAK,MACD,MAAO,2BACX,IAAK,MACD,MAAO,qEACX,IAAK,MACD,MAAO,+DACX,IAAK,MACD,MAAO,+FACX,IAAK,MACD,MAAO,iHACX,IAAK,OACD,MAAO,mCAzGA,EA6GnBkE,YAAc,WACV,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,SA9G5B,EAiHnBC,kBAAoB,SAACC,EAAaC,GAAd,OAA8B,SAACvK,GAC/C,IAAIwK,EAAIxK,EAAMyC,cAAcE,MACxB+G,EAAU,EAAKrH,MAAMqH,QACzBA,EAAQa,GAAaD,GAAaX,KAAOa,EACzC,EAAK5H,UACD,SAACP,GAEG,OADAA,EAAMqH,QAAUA,EACTrH,KAEX,WACI,EAAKuH,cAAcF,QA3HZ,EAgInBe,iBAAmB,SAACN,EAAQG,EAAaC,GACrC,MAAmB,QAAfJ,EAAOjE,KAEH,kBAAC7C,EAAA,EAAD,CACIV,MAAOwH,EAAOR,KACde,KAAK,QACLhH,SAAU,EAAK2G,kBAAkBC,EAAaC,KAInD,EAAKL,cAAcC,IA1IX,EA6InBQ,WAAa,WACT,EAAK/H,UAAS,SAACP,GAGX,OAFAA,EAAMuI,iBAActG,EACpBjC,EAAMwI,SAAMvG,EACLjC,MAjJI,EAqJnByI,UAAY,SAAC5E,EAAM2B,EAAQwB,GAAf,OAAyB,SAACrJ,GAClC6H,EAAOiC,KAAa,QAAR5D,EAAiB,CAAEA,KAAMA,EAAMyD,KAAM,IAAO,CAAEzD,KAAMA,IAChE,EAAKtD,UACD,SAACP,GAIG,OAHAA,EAAMqH,QAAQL,GAASxB,EACvBxF,EAAMuI,iBAActG,EACpBjC,EAAMwI,SAAMvG,EACLjC,KAEX,WACI,EAAKuH,cAAc,EAAKvH,MAAMqH,cA/JvB,EAoKnBqB,aAAe,SAACC,EAAWnD,EAAQwB,GAApB,OAA8B,SAACrJ,GAC1C6H,EAAOmC,OAAOgB,EAAW,GACzB,EAAKpI,UACD,SAACP,GAGG,OAFAA,EAAMqH,QAAQL,GAASxB,EACvBxF,EAAMuI,iBAActG,EACbjC,KAEX,WACI,EAAKuH,cAAc,EAAKvH,MAAMqH,cA7KvB,EAkLnBuB,gBAAkB,SAAC5B,GAAD,OAAW,SAACrJ,GAC1B,IAAIkL,EAAIlL,EAAMyC,cACd,EAAKG,UAAS,SAACP,GAIX,OAHAA,EAAMuI,YAAc,GACpBvI,EAAMuI,YAAYvB,GAAS,CAAE8B,SAAS,GACtC9I,EAAMwI,IAAMK,EACL7I,OAxLI,EA4LnB+I,UAAY,SAACvD,EAAQwB,GACPtF,IAAMsH,YAChB,MAAO,CACH,kBAACzH,GAAA,EAAD,CACI8G,KAAK,QACLY,QAAQ,WACRzH,QAAS,EAAKoH,gBAAgB5B,IAE9B,kBAAC,KAAD,OAEJ,kBAACkC,EAAA,EAAD,CACI7K,KACI,EAAK2B,MAAMuI,aACX,EAAKvI,MAAMuI,YAAYvB,IACvB,EAAKhH,MAAMuI,YAAYvB,GAAO8B,QAElCK,SAAU,EAAKnJ,MAAMwI,IAAM,EAAKxI,MAAMwI,IAAM,KAC5CY,UAAMnH,EACNoH,YAAU,GAEV,kBAACtE,EAAA,EAAD,KACI,kBAACuE,EAAA,EAAD,CAAmBC,YAAa,EAAKjB,YACjC,kBAACkB,EAAA,EAAD,CACIC,cACI,EAAKzJ,MAAMuI,aACX,EAAKvI,MAAMuI,YAAYvB,IACvB,EAAKhH,MAAMuI,YAAYvB,GAAO8B,SAGjC,EAAKf,cAAcjE,KAAI,SAAC+E,GACrB,OACI,kBAACa,EAAA,EAAD,CACIlI,QAAS,EAAKiH,UACVI,EACArD,EACAwB,IAGH,EAAKa,cAAc,CAChBhE,KAAMgF,cAnO3B,EA+OnBc,qBAAuB,SAACnE,EAAQwB,GAC5B,IAAI4C,EAAUC,GAAaC,UAAU,EAAK9J,MAAMqH,QAAQL,IAAQ+C,QAC5D,UACA,iCACA,wBACA,IACA,SAEJ,OACI,kBAACzE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACyE,GAAA,EAAD,CAAaf,QAAQ,QACjB,kBAAC1H,GAAA,EAAD,0DAAoByF,EAAQ,IAC5B,kBAACzF,GAAA,EAAD,CACIC,QAAS,WACL,EAAKkG,aAAaV,KAGtB,kBAAC,KAAD,SAIZ,kBAACzB,EAAA,EAAD,KACI,kBAAC0E,EAAA,EAAD,CAAa7E,MAAO,CAAE8E,MAAO,QAAUC,UAAU,IAC5C3E,EAAO1B,KAAI,SAAC9F,EAAGoM,GACZ,OACI,kBAACJ,GAAA,EAAD,CAAa3B,KAAK,QAAQY,QAAQ,YAC9B,kBAAC1H,GAAA,EAAD,KACK,EAAKqG,gBAAgB5J,EAAE6F,MACvB,EAAKuE,iBAAiBpK,EAAGoM,EAAGpD,IAEjC,kBAACzF,GAAA,EAAD,CACIC,QAAS,EAAKkH,aACV0B,EACA5E,EACAwB,IAGJ,kBAAC,KAAD,WAKf,EAAK+B,UAAUvD,EAAQwB,KAGhC,kBAACzB,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,kFAEJ,kBAAChB,EAAA,EAAD,KACI,kBAACvE,EAAA,EAAD,CACIiI,QAAQ,WACR7D,MAAO,CAAE8E,MAAO,OAAQzI,MAAO,SAC/BnB,MAAOsJ,OApSR,EA2SnBS,eAAiB,WACb,OACI,kBAAC/E,EAAA,EAAD,KACK,EAAKtF,MAAMqH,QAAQvD,KAAI,SAAC9F,EAAGoM,GACxB,OACI,oCACI,kBAACE,EAAA,EAAD,MACA,kBAAC/E,EAAA,EAAD,KACK,EAAKoE,qBAAqB3L,EAAGoM,IAElC,kBAACE,EAAA,EAAD,UAIZ,kBAACA,EAAA,EAAD,MACA,kBAAC/E,EAAA,EAAD,KACI,kBAAChE,GAAA,EAAD,CACI8G,KAAK,QACLjD,MAAO,CAAE8E,MAAO,QAChBjB,QAAQ,WACRzH,QAAS,EAAKgG,WAEd,kBAAC,KAAD,UAjUD,EAwUnBhH,OAAS,WACL,OAAI,EAAKR,MAAMgC,OACJ,oCAAG,EAAKqI,kBAEZ,sCA1UP,EAAKrK,MAAQ,CAAEgC,QAAQ,EAAOqF,aAASpF,GACvC,EAAKe,OAHU,E,UADKtB,IAAMC,WAiV5B4I,G,4MACF/J,OAAS,WACL,OAAO,gD,YAFckB,IAAMC,WAM7BkI,GACF,aAAe,IAAD,gCASdE,QAAU,SAACS,EAAKC,EAAKC,EAAKC,EAAKC,GAC3B,OAAO,EAAKpH,MACPM,KAAI,SAAC9F,GACF,OAAQA,EAAE6F,MACN,IAAK,MACD,OAAO2G,EACX,IAAK,MACD,OAAOC,EACX,IAAK,MACD,OAAOC,EACX,IAAK,MACD,OAAOC,EACX,IAAK,MACD,OAAOC,EACX,IAAK,OACD,OAAO5M,EAAEsJ,SAGpBuD,KAAK,MA3BA,KA8BdC,IAAM,SAACjH,EAAMyD,GACT,EAAK9D,MAAMiE,KACP5D,GAAQyD,EAAO,CAAEzD,KAAMA,EAAMyD,KAAMA,GAAS,CAAEzD,KAAMA,KAhC9C,KAoCdkH,OAAS,SAAC/D,EAAOnD,EAAMyD,GACnB,EAAK9D,MAAMwD,GACPnD,GAAQyD,EAAO,CAAEzD,KAAMA,EAAMyD,KAAMA,GAAS,CAAEzD,KAAMA,IAtC9C,KAyCdmH,OAAS,SAAChE,GACN,EAAKxD,MAAMmE,OAAOX,IA1CR,KA6CdiE,OAAS,SAACjE,EAAOnD,EAAMyD,GACnB,EAAK9D,MAAMwD,GACPnD,GAAQyD,EAAO,CAAEzD,KAAMA,EAAMyD,KAAMA,GAAS,CAAEzD,KAAMA,IA9CxDqH,KAAK1H,MAAQ,CACT,CAAEK,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OACR,CAAEA,KAAM,OAAQyD,KAAM,6CAN5BuC,GAmDKC,UAAY,SAACtG,GAChB,IAAI2H,EAAI,IAAItB,GAEZ,OADAsB,EAAE3H,MAAQA,EACH2H,GAIA9E,UCvgBT+E,G,kCAAAA,GACKC,SAAW,SAAC3N,GAAD,OAAc,SAACC,GAC7B,IACID,EAASE,KAAKC,MAAMF,EAAMyC,cAAcrC,eAC1C,MAAOC,OAJXoN,GAOKE,UAAY,SAAC7M,EAAII,EAAOnB,GAC3B,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,yCACjB,IAAIkN,EAAM,CACNC,OAAQ,OACR9I,KAAM,CAAEjE,GAAIA,EAAII,MAAOA,IAE3BV,EAAIG,OAAS8M,GAAIC,SAAS3N,GAC1BS,EAAII,KAAKX,KAAK6N,UAAUF,KAf1BH,GAkBKM,YAAc,SAACjN,EAAIf,GACtB,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,yCACjB,IAAIkN,EAAM,CACNC,OAAQ,OACR9I,KAAM,CAAEjE,GAAIA,IAEhBN,EAAIG,OAAS8M,GAAIC,SAAS3N,GAC1BS,EAAII,KAAKX,KAAK6N,UAAUF,KA1B1BH,GA6BKO,aAAe,SAAC1L,EAAKvC,GACxB,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,yCACjB,IAAIkN,EAAM,CACNC,OAAQ,OACR9I,KAAM,CAAEzC,IAAKA,IAEjB9B,EAAIG,OAAS8M,GAAIC,SAAS3N,GAC1BS,EAAII,KAAKX,KAAK6N,UAAUF,KArC1BH,GAwCKQ,aAAe,SAACnN,EAAI4D,EAAO3E,GAC9B,IAAIS,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQ,yCACjB,IAAIkN,EAAM,CACNC,OAAQ,QACR9I,KAAM,CAAEjE,GAAIA,EAAI4D,MAAOA,IAE3BlE,EAAIG,OAAS8M,GAAIC,SAAS3N,GAC1BS,EAAII,KAAKX,KAAK6N,UAAUF,KAhD1BH,GAmDKS,kBAAoB,SAAC5L,EAAKoC,EAAO3E,GACpC0N,GAAIO,aAAa1L,GAAK,SAAC6L,GACnBV,GAAIQ,aAAaE,EAAKrN,GAAI4D,EAAO3E,OArDvC0N,GAyDKW,cAAgB,SAACrO,GACpB,IAAIqB,EAAKrB,EACTsB,OAAOC,QAAQC,MAAMC,IAAI,CAAC,YAAa,WAAW,SAACC,GAC/C,IAAIC,EAAID,EACR,GAAIC,EAAEC,QAAUD,EAAEE,UAAW,CACzB,IAAI8C,EAAQ,CACR7C,YAAaH,EAAEE,UAAUC,YACnBH,EAAEE,UAAUC,iBACZyC,EACNU,SAAUtD,EAAEE,UAAUoD,SAChBtD,EAAEE,UAAUoD,SAASmB,KAAI,SAAC9F,GACtB,MAAO,CACHE,WAAYF,EAAEE,WACRF,EAAEE,gBACF+D,WAGdA,GAEVmJ,GAAIQ,aAAavM,EAAEC,OAAQ+C,EAAOtD,QA5E5CqM,GAiFKY,gBAAkB,SAACtO,GACtB,IAAIqB,EAAKrB,EAETsB,OAAOC,QAAQC,MAAMC,IAAI,CAAC,YAAa,WAAW,SAACC,GAC/C,IAAIC,EAAID,EACJC,EAAEC,QACF8L,GAAIM,YAAYrM,EAAEC,QAAQ,SAAC2M,GACvB,IAAI5J,EAAQhD,EAAEE,UAAYF,EAAEE,UAAY,GACxC8C,EAAMM,SAAWsJ,EAAK5J,MAAMM,SACtBsJ,EAAK5J,MAAMM,SAASmB,KAAI,SAAC9F,EAAGoM,GAOxB,OANApM,EAAE6E,OACER,EAAMM,UACNN,EAAMM,SAASyH,IACf/H,EAAMM,SAASyH,GAAGvH,OACZR,EAAMM,SAASyH,GAAGvH,OAClB,GACH7E,KAEX,GACNqE,EAAM7C,YAAcyM,EAAK5J,MAAM7C,YAC/BR,OAAOC,QAAQC,MAAM4D,IAAI,CAAEvD,UAAW8C,IAAS,WAC3C,IACItD,EAAGsD,GACL,MAAOrE,eAQlBoN,UCjFTc,G,uKAEE,OACI,yBACI9G,MAAO,CACH+G,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,0BAGdpB,KAAKpL,MAAMyM,c,GAXH7K,IAAMC,WAgCzB6K,IAfmB9K,IAAMC,U,kDAgB3B,WAAY7B,GAAQ,IAAD,uBACf,cAAMA,IAqBV2M,YAAc,WACV,IAAIhK,EAAI,eACRzD,OAAOC,QAAQC,MAAMC,IAAI,CAAC,SAAU,cAAc,SAACC,GAC/C,IAAIC,EAAID,EACJC,EAAEE,WAAaF,EAAEE,UAAUC,aAAeH,EAAEC,QAC5CN,OAAOC,QAAQC,MAAMwN,UAAUC,aAAY,SAACtN,GACxCA,EAAEE,WAAa6L,GAAIW,mBAEvB,EAAKa,SAASvN,EAAEC,OAAQD,EAAEE,aAE1BF,EAAEE,UAAYF,EAAEE,UAAYF,EAAEE,UAAY,GAC1CP,OAAOC,QAAQC,MAAM4D,IAAI,CAAEvD,UAAWF,EAAEE,YAAa,WACjDkD,EAAKlC,UACD,SAACP,GAKG,OAJAA,EAAM6M,SAAU,EAChB7M,EAAM8M,YAAa,EACnB9M,EAAMR,iBAAcyC,EACpBjC,EAAMV,YAAS2C,EACRjC,KAEX,uBA1CD,EAiDnB4M,SAAW,SAACtN,EAAQ+C,GAChB,IAAI0K,EAAI1K,EACJI,EAAI,eACRA,EAAKlC,UACD,SAACP,GACGA,EAAM6M,SAAU,KAEpB,WACI7N,OAAOC,QAAQC,MAAM4D,IAAI,CAAEkK,YAAY,IAAS,WAC5C5B,GAAIY,iBAAgB,WAChBvJ,EAAKlC,UAAS,SAACP,GAIX,OAHAA,EAAM8M,YAAa,EACnB9M,EAAMR,YAAcuN,EAAEvN,YACtBQ,EAAMV,OAASA,EACRU,eA/DZ,EAuEnBiN,SAAW,WACPjO,OAAOC,QAAQC,MAAM4D,IAAI,CAAE,YAAc,IAAQ,WAC7CoK,OAAO7O,KACH,kJA1EO,EA+EnB8O,cAAgB,SAAC9O,GAAD,OAAU,SAACV,GACV,OAATU,IACAA,GAAQ,EAAK2B,MAAM3B,QAGnBV,GACe,YAAfA,EAAMkG,MACS,QAAdlG,EAAMsC,KAA+B,UAAdtC,EAAMsC,MAIlC,EAAKM,UAAS,SAACP,GAEX,OADAA,EAAM3B,KAAOA,EACN2B,OA5FI,EAgGnBoN,KAAO,WACH,EAAK7M,UAAS,SAACP,GAEX,OADAA,EAAMsG,YAAc,EACbtG,MAnGI,EAuGnBqN,YAAc,SAACR,GACX,OAAKA,EAID,kBAACS,EAAA,EAAD,CACIlI,MAAO,CACH8E,MAAO,MAGX,kBAACqD,EAAA,EAAD,CACIC,OAAQ,kBAACC,EAAA,EAAD,CAAQC,IAAI,iBACpBxJ,MAAO,kBAACqC,EAAA,EAAD,CAAY0C,QAAQ,MAApB,WACP0E,UAAU,uEAEd,kBAACC,EAAA,EAAD,CACIxI,MAAO,CACHyI,WAAY,SACZC,eAAgB,WAGpB,kBAACvH,EAAA,EAAD,ubAKJ,kBAACwH,EAAA,EAAD,CACI3I,MAAO,CACHyI,WAAY,SACZC,eAAgB,WAGpB,kBAACvM,GAAA,EAAD,CACI0H,QAAQ,YACRxH,MAAM,UACND,QAAS,EAAKyL,UAHlB,6JA9BD,kBAAC9H,EAAA,EAAD,CAAkB1D,MAAM,aAzGpB,EAmJnBjB,OAAS,WACL,OAAK,EAAKR,MAAM8M,WAUZ,oCACI,kBAACkB,EAAA,EAAD,CAAQ7B,SAAS,UACb,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,KAAK,QACL1M,MAAM,UACN2M,aAAW,OACX5M,QAAS,EAAK2L,eAAc,IAE5B,kBAAC,IAAD,OAEJ,kBAACM,EAAA,EAAD,CACIC,IAAI,eACJtI,MAAO,CAAEiJ,OAAQ,WACjB7M,QAAS,EAAK4L,OAElB,kBAAC7G,EAAA,EAAD,CACInB,MAAO,CAAEiJ,OAAQ,UAAWC,WAAY,IACxC9M,QAAS,EAAK4L,KACdnE,QAAQ,MAHZ,aASR,kBAACsF,EAAA,EAAD,CACIlQ,KAAM,EAAK2B,MAAM3B,KACjBmQ,OAAQ,EAAKrB,eAAc,GAC3BzM,QAAS,EAAKyM,eAAc,IAE5B,kBAAC,GAAD,CAAUsB,KAAI,kBAElB,kBAAC,GAAD,CAAYnI,YAAa,EAAKtG,MAAMsG,YAAamI,KAAI,iBACrD,kBAAC,GAAD,CAAenI,YAAa,EAAKtG,MAAMsG,eAzCvC,kBAACoI,EAAA,EAAD,CAAUrQ,MAAM,EAAM+G,MAAO,CAAE3D,MAAO,YAClC,kBAAC,GAAD,KACK,EAAK4L,YAAY,EAAKrN,MAAM6M,YApJ7C,EAAK7M,MAAQ,CAAE8M,YAAY,EAAOD,SAAS,GAC3C,EAAKJ,cACL,IAAIhK,EAAI,eANO,OAQfzD,OAAO2P,QAAQC,UAAUjC,aACrB,SAACkC,EAASC,EAAQC,GAEVF,EAAQvP,QACRuP,EAAQrP,aACa,UAArBqP,EAAQG,YAERD,EAAa,IACbtM,EAAKgK,kBAhBF,E,UADJ/K,IAAMC,YAsMnBsN,G,4MACF7B,KAAO,WACH,EAAKtN,MAAM2O,KAAKlO,UAAS,SAACP,GAEtB,OADAA,EAAMsG,YAAc,EACbtG,M,EAIfQ,OAAS,WACL,OACI,kBAACyJ,EAAA,EAAD,CAAa7E,MAAO,CAAEC,QAAS,IAAM+I,aAAW,cAC5C,kBAACc,EAAA,EAAD,CAAM9J,MAAO,CAAEiJ,OAAQ,WAAa7M,QAAS,EAAK4L,MAAlD,WAGA,kBAAC7G,EAAA,EAAD,CAAYnB,MAAO,CAAEiJ,OAAQ,YAErB,CACI,oIACA,4GACA,wFACA,iFACA,IACF,EAAKvO,MAAMwG,gB,YAtBZ5E,IAAMC,WA8BzBwN,G,4MACFC,aAAe,WACX,EAAKtP,MAAM2O,KAAKlO,UAAS,SAACP,GAGtB,OAFAA,EAAM3B,MAAO,EACb2B,EAAMsG,YAAc,EACbtG,M,EAIfqP,UAAY,WACR,EAAKvP,MAAM2O,KAAKlO,UAAS,SAACP,GAGtB,OAFAA,EAAM3B,MAAO,EACb2B,EAAMsG,YAAc,EACbtG,M,EAIfsP,WAAa,WACT,EAAKxP,MAAM2O,KAAKlO,UAAS,SAACP,GAGtB,OAFAA,EAAM3B,MAAO,EACb2B,EAAMsG,YAAc,EACbtG,M,EAIfuP,YAAc,WACV,EAAKzP,MAAM2O,KAAKlO,UAAS,SAACP,GAGtB,OAFAA,EAAM3B,MAAO,EACb2B,EAAMsG,YAAc,EACbtG,M,EAIfQ,OAAS,WACL,OACI,oCACI,kBAAC8E,EAAA,EAAD,CAAMF,MAAO,CAAEoK,WAAY,IACvB,kBAACjK,EAAA,EAAD,CACIH,MAAO,CACHC,QAAS,GACToK,YAAa,GACbC,WAAY,UACZjO,MAAO,SAEX+D,QAAM,EACNvF,IAAK,4EACLuB,QAAS,EAAK1B,MAAM2O,KAAKtB,eAAc,IAEvC,kBAAC1H,EAAA,EAAD,KACI,kBAAC,IAAD,CAAeL,MAAO,CAAE3D,MAAO,YAEnC,kBAACiE,EAAA,EAAD,CACIN,MAAO,CAAEkJ,YAAa,IACtB3I,QAAS,gFAIrB,kBAAC2E,EAAA,EAAD,MACA,2BAAOlF,MAAO,CAAEuK,UAAW,WAA3B,yHAGA,kBAACrF,EAAA,EAAD,MACA,kBAAChF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAAM,EACNhE,QAAS,EAAK4N,aACdnP,IAAK,qIAEL,kBAACwF,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAS,uIAE3B,kBAACJ,EAAA,EAAD,CACIC,QAAM,EACNhE,QAAS,EAAK6N,UACdpP,IAAK,6GAEL,kBAACwF,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAS,gHAI/B,kBAAC2E,EAAA,EAAD,MACA,2BAAOlF,MAAO,CAAEuK,UAAW,WAA3B,+FACA,kBAACrF,EAAA,EAAD,MACA,kBAAChF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAAM,EACNhE,QAAS,EAAK8N,WACdrP,IAAK,yFAEL,kBAACwF,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAS,2FAE3B,kBAACJ,EAAA,EAAD,CACIC,QAAM,EACNhE,QAAS,EAAK+N,YACdtP,IAAK,kFAEL,kBAACwF,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAAS,uF,YA3GxBjE,IAAMC,WAmHd6K,MC/YAoD,OANf,WACE,OACE,kBAAC,GAAD,OCOgBC,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCVNC,IAASzP,OACP,kBAAC,IAAM0P,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxN,GACLE,QAAQF,MAAMA,EAAMzE,c","file":"static/js/main.16ffcb2e.chunk.js","sourcesContent":["/*global chrome*/\r\n\r\nclass VKMethods {\r\n    static executed = (callback) => (event) => {\r\n        if (callback) {\r\n            try {\r\n                callback(JSON.parse(event.target.responseText));\r\n            } catch (e) {}\r\n        }\r\n    };\r\n\r\n    static getGroupChats = (groupToken, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/messages.getConversations?access_token=${groupToken}&v=5.120`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static sendMessageToGroupChat = (groupToken, id, message, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/messages.send?peer_id=${id}&message=${encodeURIComponent(\r\n                message\r\n            )}&access_token=${groupToken}&v=5.38`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static getUsersGroups = (id, token, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"GET\",\r\n            `https://api.vk.com/method/groups.get?user_id=${id}&filter=admin,editor,moder&extended=1&v=5.92&access_token=${token}`\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static getMyGroups = (callback) => {\r\n        var cb = callback\r\n        chrome.storage.local.get(['settsData', 'userId'], (res)=>{\r\n            var r = res;\r\n            VKMethods.getUsersGroups(r.userId, r.settsData.accessToken, cb)\r\n        })\r\n    }\r\n\r\n    static postOnGroupWall = (groupId, token, message, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n            \"POST\",\r\n            `https://api.vk.com/method/wall.post?owner_id=-${groupId}&from_group=1&message=${message}&signed=1&v=5.120&access_token=${token}`,\r\n            true\r\n        );\r\n        xhr.onload = VKMethods.executed(callback);\r\n        xhr.send();\r\n    };\r\n\r\n    static postOnMyGroupWall = (groupId, message, callback) => {\r\n        var cb = callback\r\n        var id = groupId;\r\n        var m = message;\r\n        chrome.storage.local.get(['settsData'], (res)=>{\r\n            var r = res;\r\n            VKMethods.postOnGroupWall(id, r.settsData.accessToken, m, cb)\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default VKMethods;\r\n","/*global chrome*/\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport React from \"react\";\r\nimport VKMethods from \"./VKMethods\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nclass APIKeyDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { key: \"\" };\r\n    }\r\n\r\n    onOk = () => {\r\n        this.props.onOk(this.state.key);\r\n    };\r\n\r\n    onCancel = () => {\r\n        this.props.onCancel();\r\n    };\r\n\r\n    keyChanged = (event) => {\r\n        if (event.currentTarget) {\r\n            var newKey = event.currentTarget.value;\r\n            this.setState((state) => {\r\n                state.key = newKey;\r\n                return state;\r\n            });\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Dialog\r\n                open={this.props.open}\r\n                onClose={this.switchDialog}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle>Введите API-ключ группы</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Для обеспечения возможности отправки сообщений в чаты\r\n                        необходимо указать API-ключ группы.\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"API-ключ группы\"\r\n                        fullWidth\r\n                        onChange={this.keyChanged}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.onCancel} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={this.onOk} color=\"primary\">\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    };\r\n}\r\n\r\nclass MessagesTab extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            platform: this.props.platform,\r\n            openDialog: false,\r\n            gotToken: false,\r\n            loaded: false,\r\n        };\r\n    }\r\n\r\n    build = () => {\r\n        return this.state.platform != this.props.platform\r\n            ? this.setState(\r\n                  (state, props) => {\r\n                      state.gotToken = false;\r\n                      state.platform = props.platform;\r\n                      state.loaded = false;\r\n                      state.groupToken = undefined;\r\n                      return state;\r\n                  },\r\n                  () => {\r\n                      this.rebuild();\r\n                  }\r\n              )\r\n            : this.rebuild();\r\n    };\r\n\r\n    rebuild = () => {\r\n        return (\r\n            !this.state.gotToken &&\r\n            this.getMessages((platformMsg, setts) => {\r\n                return (\r\n                    platformMsg.groupToken &&\r\n                    this.gotToken(platformMsg.groupToken, this.reload)\r\n                );\r\n            })\r\n        );\r\n    };\r\n\r\n    openDialog = () => {\r\n        this.setState((state) => {\r\n            state.openDialog = true;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    closeDialog = () => {\r\n        this.setState((state) => {\r\n            state.openDialog = false;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    getMessages = (callback) => {\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\"], (res) => {\r\n            var r = res;\r\n            var data = r.settsData != undefined ? r.settsData : {};\r\n            data.messages = data.messages ? data.messages : [];\r\n            data.messages[self.state.platform] = data.messages[\r\n                self.state.platform\r\n            ]\r\n                ? data.messages[self.state.platform]\r\n                : {};\r\n            try {\r\n                callback(data.messages[self.state.platform], data);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updateMessages = (token, toSend, callback) => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            platformMsg.groupToken = token;\r\n            platformMsg.toSend = toSend;\r\n            setts.messages[this.props.platform] = platformMsg;\r\n            chrome.storage.local.set({ settsData: setts }, () => {\r\n                try {\r\n                    callback(platformMsg, setts);\r\n                } catch (e) {}\r\n            });\r\n        });\r\n    };\r\n\r\n    gotToken = (token, callback) => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            this.updateMessages(token, platformMsg.toSend, () => {\r\n                this.setState(\r\n                    (state) => {\r\n                        state.gotToken = true;\r\n                        state.groupToken = token;\r\n                        state.openDialog = false;\r\n                        return state;\r\n                    },\r\n                    () => {\r\n                        try {\r\n                            callback(token, platformMsg, setts);\r\n                        } catch (e) {}\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n\r\n    reload = () => {\r\n        this.setState(\r\n            (state) => {\r\n                state.loaded = false;\r\n                state.openDialog = false;\r\n                state.chats = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.load();\r\n            }\r\n        );\r\n    };\r\n\r\n    load = () => {\r\n        this.getMessages((platformMsg, setts) => {\r\n            var p = {\r\n                groupToken: platformMsg.groupToken,\r\n                toSend: platformMsg.toSend ? platformMsg.toSend : [],\r\n            };\r\n            VKMethods.getGroupChats(p.groupToken, (result) => {\r\n                if (result.error) {\r\n                    alert(result);\r\n                    console.log(result);\r\n                }\r\n                this.setState(\r\n                    (state) => {\r\n                        p.toSend = p.toSend ? p.toSend : [];\r\n                        state.chats = result.response.items\r\n                            .filter((c) => {\r\n                                return c.conversation.peer.type == \"chat\";\r\n                            })\r\n                            .map((chat) => {\r\n                                return {\r\n                                    id: chat.conversation.peer.id,\r\n                                    name: chat.conversation.chat_settings.title,\r\n                                    selected: p.toSend.includes(\r\n                                        chat.conversation.peer.id\r\n                                    ),\r\n                                };\r\n                            });\r\n                        state.loaded = true;\r\n\r\n                        return state;\r\n                    },\r\n                    () => {\r\n                        this.updateMessages(\r\n                            platformMsg.groupToken,\r\n                            this.state.chats\r\n                                .filter((e) => e.selected)\r\n                                .map((e) => e.id)\r\n                        );\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    };\r\n\r\n    toSendChanged = (chat) => (event) => {\r\n        chat.selected = !chat.selected;\r\n        this.getMessages((platformMsg, setts) => {\r\n            this.updateMessages(\r\n                platformMsg.groupToken,\r\n                this.state.chats\r\n                    .filter((e) =>\r\n                        e.id == chat.id ? chat.selected : e.selected\r\n                    )\r\n                    .map((e) => e.id),\r\n                () => {\r\n                    this.setState((state) => {\r\n                        state.chats = state.chats.map((e) => {\r\n                            return e.id == chat.id ? chat : e;\r\n                        });\r\n                        return state;\r\n                    });\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    getChatRows = () => {\r\n        return this.state.chats.map((e) => {\r\n            return (\r\n                <TableRow>\r\n                    <TableCell>{e.name}</TableCell>\r\n                    <TableCell>\r\n                        <Switch\r\n                            checked={e.selected}\r\n                            color=\"primary\"\r\n                            onChange={this.toSendChanged(e)}\r\n                        />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                this.getMessages((platformMsg) => {\r\n                                    VKMethods.sendMessageToGroupChat(\r\n                                        platformMsg.groupToken,\r\n                                        e.id,\r\n                                        \"Тестовое сообщение\"\r\n                                    );\r\n                                });\r\n                            }}\r\n                        >\r\n                            Тестовое сообщение\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n            );\r\n        });\r\n    };\r\n\r\n    getChatTable = () => {\r\n        if (this.state.loaded) {\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Чат</TableCell>\r\n                                <TableCell>Отправка</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Button onClick={this.reload}>\r\n                                        <RefreshIcon />\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>{this.getChatRows()}</TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n\r\n    render = () => {\r\n        this.build();\r\n        if (this.state.gotToken) {\r\n            return (\r\n                <>\r\n                    <List>\r\n                        <ListItem button onClick={this.openDialog}>\r\n                            <ListItemIcon>\r\n                                <EditIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText\r\n                                primary={\r\n                                    this.state.groupToken.slice(0, 10) + \"...\"\r\n                                }\r\n                            />\r\n                        </ListItem>\r\n                    </List>\r\n                    <APIKeyDialog\r\n                        open={this.state.openDialog}\r\n                        onCancel={this.closeDialog}\r\n                        onOk={(token) => {\r\n                            this.gotToken(token, this.reload);\r\n                        }}\r\n                    />\r\n                    {this.getChatTable()}\r\n                </>\r\n            );\r\n        } else if (this.state.gotToken != undefined) {\r\n            return (\r\n                <>\r\n                    <List>\r\n                        <ListItem button onClick={this.openDialog}>\r\n                            <ListItemIcon>\r\n                                <AddIcon />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={\"Укажите API-ключ группы\"} />\r\n                        </ListItem>\r\n                    </List>\r\n                    <APIKeyDialog\r\n                        open={this.state.openDialog}\r\n                        onCancel={this.closeDialog}\r\n                        onOk={(token) => {\r\n                            this.gotToken(token, this.reload);\r\n                        }}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n}\r\n\r\nclass PostsTab extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false,\r\n            platform: -1, //this.props.platform,\r\n            groups: undefined,\r\n        };\r\n    }\r\n\r\n    build = () => {\r\n        return this.state.platform != this.props.platform\r\n            ? this.reload()\r\n            : undefined;\r\n    };\r\n\r\n    reload = () => {\r\n        this.setState(\r\n            (state) => {\r\n                state.loaded = false;\r\n                state.groups = undefined;\r\n                state.platform = this.props.platform;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.load();\r\n            }\r\n        );\r\n    };\r\n\r\n    load = () => {\r\n        this.getPosts((posts, setts) => {\r\n            var p = posts ? posts.map((e) => e) : [];\r\n            VKMethods.getMyGroups((result) => {\r\n                if (result.error) {\r\n                    alert(result);\r\n                    console.log(result);\r\n                    return;\r\n                }\r\n                this.setState((state) => {\r\n                    state.loaded = true;\r\n                    state.groups = result.response.items.map(\r\n                        (e) => {\r\n                            return {\r\n                                id: e.id,\r\n                                name: e.name,\r\n                                selected: p.includes(e.id),\r\n                            };\r\n                        },\r\n                        () => {\r\n                            this.updatePosts(\r\n                                this.state.groups\r\n                                    .filter((e) => e.selected)\r\n                                    .map((e) => e.id)\r\n                            );\r\n                        }\r\n                    );\r\n                    return state;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getPosts = (callback) => {\r\n        var cb = callback;\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\"], (r) => {\r\n            var posts =\r\n                r.settsData.posts && r.settsData.posts[self.state.platform]\r\n                    ? r.settsData.posts[self.state.platform]\r\n                    : [];\r\n            try {\r\n                cb(posts, r.settsData);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updatePosts = (newPosts, callback) => {\r\n        this.getPosts((posts, setts) => {\r\n            var cb = callback;\r\n            setts.posts = setts.posts ? setts.posts : [];\r\n            setts.posts[this.state.platform] = newPosts;\r\n            chrome.storage.local.set({ settsData: setts }, () => {\r\n                try {\r\n                    cb(setts);\r\n                } catch (e) {}\r\n            });\r\n        });\r\n    };\r\n\r\n    toSendChanged = (group) => (event) => {\r\n        group.selected = !group.selected;\r\n\r\n        this.updatePosts(\r\n            this.state.groups\r\n                .filter((e) => (e.id == group.id ? group.selected : e.selected))\r\n                .map((e) => e.id),\r\n            () => {\r\n                this.setState((state) => {\r\n                    state.loaded = true;\r\n                    state.groups = state.groups.map((e) => {\r\n                        return e.id == group.id ? group : e;\r\n                    });\r\n                    return state;\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    getGropuRows = () => {\r\n        return this.state.groups.map((e) => {\r\n            return (\r\n                <TableRow>\r\n                    <TableCell>{e.name}</TableCell>\r\n                    <TableCell>\r\n                        <Switch\r\n                            checked={e.selected}\r\n                            color=\"primary\"\r\n                            onChange={this.toSendChanged(e)}\r\n                        />\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                VKMethods.postOnMyGroupWall(\r\n                                    e.id,\r\n                                    \"Тестовый пост\"\r\n                                );\r\n                            }}\r\n                        >\r\n                            Тестовый пост\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n            );\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        this.build();\r\n        if (this.state.loaded) {\r\n            return (\r\n                <TableContainer component={Paper}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Группа</TableCell>\r\n                                <TableCell>Отправка</TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Button onClick={this.reload}>\r\n                                        <RefreshIcon />\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>{this.getGropuRows()}</TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            );\r\n        }\r\n        return <CircularProgress style={{ padding: 20 }} />;\r\n    };\r\n}\r\n\r\nexport { MessagesTab, PostsTab };\r\n","/*global chrome*/\r\n\r\nimport React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport MenuList from \"@material-ui/core/MenuList\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\n\r\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\r\nimport UnfoldMoreIcon from \"@material-ui/icons/UnfoldMore\";\r\nimport TimelapseIcon from \"@material-ui/icons/Timelapse\";\r\nimport FormatLineSpacingIcon from \"@material-ui/icons/FormatLineSpacing\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nimport { MessagesTab, PostsTab } from \"./TradeSTabs\";\r\nimport {\r\n    Breadcrumbs,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    Button,\r\n    ButtonGroup,\r\n    ListItemIcon,\r\n} from \"@material-ui/core\";\r\n\r\nclass TradeSContent extends React.Component {\r\n    render = () => {\r\n        switch (this.props.currentPage) {\r\n            case 0:\r\n                return <MessagesContent />;\r\n            case 1:\r\n                return <PostsContent />;\r\n            case 2:\r\n                return <FormatContent />;\r\n            case 3:\r\n                return <AccountContent />;\r\n            default:\r\n                return <Typography>Default page</Typography>;\r\n        }\r\n    };\r\n}\r\n\r\nfunction OPTabs(props) {\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        props.tabChanged(newValue);\r\n    };\r\n    return (\r\n        <Paper>\r\n            <Tabs value={value} onChange={handleChange}>\r\n                <Tab label=\"Olymp Trade\" />\r\n                <Tab label=\"Pocket Option\" />\r\n            </Tabs>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nclass MessagesContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { index: 0 };\r\n    }\r\n\r\n    tabChanged = (index) => {\r\n        this.setState((state) => {\r\n            state.index = index;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    currentTab = () => {\r\n        return <MessagesTab platform={this.state.index} />;\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <OPTabs tabChanged={this.tabChanged} />\r\n                {this.currentTab()}\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass PostsContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { index: 0 };\r\n    }\r\n\r\n    tabChanged = (index) => {\r\n        this.setState((state) => {\r\n            state.index = index;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <OPTabs tabChanged={this.tabChanged} />\r\n                <PostsTab platform={this.state.index} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass FormatContent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { loaded: false, buttons: undefined };\r\n        this.load();\r\n    }\r\n\r\n    getButtons = (callback) => {\r\n        var self = this;\r\n        var cb = callback;\r\n        chrome.storage.local.get([\"buttons\"], (r) => {\r\n            var buttons = r.buttons\r\n                ? r.buttons\r\n                : [\r\n                      [\r\n                          { type: \"ass\" },\r\n                          { type: \"exp\" },\r\n                          { type: \"dir\" },\r\n                          { type: \"text\", text: \"готовим\" },\r\n                      ],\r\n                      [\r\n                          { type: \"ass\" },\r\n                          { type: \"exp\" },\r\n                          { type: \"dir\" },\r\n                          { type: \"text\", text: \"СТАВИМ!!!\" },\r\n                      ],\r\n                  ];\r\n            try {\r\n                cb(buttons);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    updateButtons = (buttons, callback) => {\r\n        var cb = callback;\r\n        chrome.storage.local.set({ buttons: buttons }, () => {\r\n            try {\r\n                cb(buttons);\r\n            } catch (e) {}\r\n        });\r\n    };\r\n\r\n    load = () => {\r\n        this.getButtons((buttons) => {\r\n            this.setState((state) => {\r\n                state.buttons = buttons;\r\n                state.loaded = true;\r\n                return state;\r\n            });\r\n        });\r\n    };\r\n\r\n    addButton = () => {\r\n        this.getButtons((buttons) => {\r\n            buttons.push([{ type: \"text\", text: \"Сигнал\" }]);\r\n            this.updateButtons(buttons, (buttons) => {\r\n                this.setState((state) => {\r\n                    state.buttons = buttons;\r\n                    return state;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    deleteButton = (index) => {\r\n        this.getButtons((buttons) => {\r\n            buttons.splice(index, 1);\r\n            this.updateButtons(buttons, (buttons) => {\r\n                this.setState((state) => {\r\n                    state.buttons = buttons;\r\n                    return state;\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    getFormatAvatar = (type) => {\r\n        switch (type) {\r\n            case \"ass\":\r\n                return <AssessmentIcon />;\r\n            case \"dir\":\r\n                return <UnfoldMoreIcon />;\r\n            case \"exp\":\r\n                return <TimelapseIcon />;\r\n            case \"stn\":\r\n                return <FormatLineSpacingIcon />;\r\n            case \"stv\":\r\n                return <FormatLineSpacingIcon />;\r\n            case \"text\":\r\n                return <DescriptionIcon />;\r\n        }\r\n    };\r\n\r\n    getFormatText = (format) => {\r\n        switch (format.type) {\r\n            case \"ass\":\r\n                return \"Пара\";\r\n            case \"dir\":\r\n                return \"Направление\";\r\n            case \"exp\":\r\n                return \"Экспирация\";\r\n            case \"stn\":\r\n                return \"Номер страйк-цены\";\r\n            case \"stv\":\r\n                return \"Значение страцк-цены\";\r\n            case \"text\":\r\n                return \"Текст\";\r\n        }\r\n    };\r\n\r\n    formatTypes = () => {\r\n        return [\"ass\", \"dir\", \"exp\", \"stn\", \"stv\", \"text\"];\r\n    };\r\n\r\n    textFormatChanged = (formatIndex, buttonIndex) => (event) => {\r\n        var v = event.currentTarget.value;\r\n        var buttons = this.state.buttons;\r\n        buttons[buttonIndex][formatIndex].text = v;\r\n        this.setState(\r\n            (state) => {\r\n                state.buttons = buttons;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.updateButtons(buttons);\r\n            }\r\n        );\r\n    };\r\n\r\n    getFormatContent = (format, formatIndex, buttonIndex) => {\r\n        if (format.type == \"text\") {\r\n            return (\r\n                <TextField\r\n                    value={format.text}\r\n                    size=\"small\"\r\n                    onChange={this.textFormatChanged(formatIndex, buttonIndex)}\r\n                ></TextField>\r\n            );\r\n        }\r\n        return this.getFormatText(format);\r\n    };\r\n\r\n    closeMenus = () => {\r\n        this.setState((state) => {\r\n            state.buttonMenus = undefined;\r\n            state.ref = undefined;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    onAddItem = (type, button, index) => (event) => {\r\n        button.push(type == \"text\" ? { type: type, text: \"\" } : { type: type });\r\n        this.setState(\r\n            (state) => {\r\n                state.buttons[index] = button;\r\n                state.buttonMenus = undefined;\r\n                state.ref = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.updateButtons(this.state.buttons);\r\n            }\r\n        );\r\n    };\r\n\r\n    onDeleteItem = (itemIndex, button, index) => (event) => {\r\n        button.splice(itemIndex, 1);\r\n        this.setState(\r\n            (state) => {\r\n                state.buttons[index] = button;\r\n                state.buttonMenus = undefined;\r\n                return state;\r\n            },\r\n            () => {\r\n                this.updateButtons(this.state.buttons);\r\n            }\r\n        );\r\n    };\r\n\r\n    openAddItemMenu = (index) => (event) => {\r\n        var t = event.currentTarget;\r\n        this.setState((state) => {\r\n            state.buttonMenus = {};\r\n            state.buttonMenus[index] = { addItem: true };\r\n            state.ref = t;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    itemAdder = (button, index) => {\r\n        var ref = React.createRef();\r\n        return [\r\n            <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                onClick={this.openAddItemMenu(index)}\r\n            >\r\n                <AddIcon />\r\n            </Button>,\r\n            <Popper\r\n                open={\r\n                    this.state.buttonMenus &&\r\n                    this.state.buttonMenus[index] &&\r\n                    this.state.buttonMenus[index].addItem\r\n                }\r\n                anchorEl={this.state.ref ? this.state.ref : null}\r\n                role={undefined}\r\n                transition\r\n            >\r\n                <Paper>\r\n                    <ClickAwayListener onClickAway={this.closeMenus}>\r\n                        <MenuList\r\n                            autoFocusItem={\r\n                                this.state.buttonMenus &&\r\n                                this.state.buttonMenus[index] &&\r\n                                this.state.buttonMenus[index].addItem\r\n                            }\r\n                        >\r\n                            {this.formatTypes().map((t) => {\r\n                                return (\r\n                                    <MenuItem\r\n                                        onClick={this.onAddItem(\r\n                                            t,\r\n                                            button,\r\n                                            index\r\n                                        )}\r\n                                    >\r\n                                        {this.getFormatText({\r\n                                            type: t,\r\n                                        })}\r\n                                    </MenuItem>\r\n                                );\r\n                            })}\r\n                        </MenuList>\r\n                    </ClickAwayListener>\r\n                </Paper>\r\n            </Popper>,\r\n        ];\r\n    };\r\n\r\n    getButtonConstructor = (button, index) => {\r\n        var preview = ButtonFormat.fromItems(this.state.buttons[index]).restore(\r\n            \"EUR USD\",\r\n            \"вверх\",\r\n            \"1 мин.\",\r\n            \"0\",\r\n            \"1.154\"\r\n        );\r\n        return (\r\n            <List>\r\n                <ListItem>\r\n                    <ButtonGroup variant=\"text\">\r\n                        <Button>{`Сигнал №${index + 1}`}</Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                this.deleteButton(index);\r\n                            }}\r\n                        >\r\n                            <DeleteIcon />\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Breadcrumbs style={{ width: \"100%\" }} separator=\"\">\r\n                        {button.map((e, i) => {\r\n                            return (\r\n                                <ButtonGroup size=\"small\" variant=\"outlined\">\r\n                                    <Button>\r\n                                        {this.getFormatAvatar(e.type)}\r\n                                        {this.getFormatContent(e, i, index)}\r\n                                    </Button>\r\n                                    <Button\r\n                                        onClick={this.onDeleteItem(\r\n                                            i,\r\n                                            button,\r\n                                            index\r\n                                        )}\r\n                                    >\r\n                                        <DeleteIcon />\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            );\r\n                        })}\r\n                        {this.itemAdder(button, index)}\r\n                    </Breadcrumbs>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <Typography>Предпросмотр</Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        style={{ width: \"100%\", color: \"black\" }}\r\n                        value={preview}\r\n                    ></TextField>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n    };\r\n\r\n    getButtonsList = () => {\r\n        return (\r\n            <List>\r\n                {this.state.buttons.map((e, i) => {\r\n                    return (\r\n                        <>\r\n                            <Divider />\r\n                            <ListItem>\r\n                                {this.getButtonConstructor(e, i)}\r\n                            </ListItem>\r\n                            <Divider />\r\n                        </>\r\n                    );\r\n                })}\r\n                <Divider />\r\n                <ListItem>\r\n                    <Button\r\n                        size=\"large\"\r\n                        style={{ width: \"100%\" }}\r\n                        variant=\"outlined\"\r\n                        onClick={this.addButton}\r\n                    >\r\n                        <AddIcon />\r\n                    </Button>\r\n                </ListItem>\r\n            </List>\r\n        );\r\n    };\r\n\r\n    render = () => {\r\n        if (this.state.loaded) {\r\n            return <>{this.getButtonsList()}</>;\r\n        }\r\n        return <></>;\r\n    };\r\n}\r\n\r\nclass AccountContent extends React.Component {\r\n    render = () => {\r\n        return <>account</>;\r\n    };\r\n}\r\n\r\nclass ButtonFormat {\r\n    constructor() {\r\n        this.items = [\r\n            { type: \"ass\" },\r\n            { type: \"exp\" },\r\n            { type: \"dir\" },\r\n            { type: \"text\", text: \"СТАВИМ!!!\" },\r\n        ];\r\n    }\r\n\r\n    restore = (ass, dir, exp, stn, stv) => {\r\n        return this.items\r\n            .map((e) => {\r\n                switch (e.type) {\r\n                    case \"ass\":\r\n                        return ass;\r\n                    case \"dir\":\r\n                        return dir;\r\n                    case \"exp\":\r\n                        return exp;\r\n                    case \"stn\":\r\n                        return stn;\r\n                    case \"stv\":\r\n                        return stv;\r\n                    case \"text\":\r\n                        return e.text;\r\n                }\r\n            })\r\n            .join(\" \");\r\n    };\r\n\r\n    add = (type, text) => {\r\n        this.items.push(\r\n            type == text ? { type: type, text: text } : { type: type }\r\n        );\r\n    };\r\n\r\n    insert = (index, type, text) => {\r\n        this.items[index] =\r\n            type == text ? { type: type, text: text } : { type: type };\r\n    };\r\n\r\n    delete = (index) => {\r\n        this.items.splice(index);\r\n    };\r\n\r\n    update = (index, type, text) => {\r\n        this.items[index] =\r\n            type == text ? { type: type, text: text } : { type: type };\r\n    };\r\n\r\n    static fromItems = (items) => {\r\n        var b = new ButtonFormat();\r\n        b.items = items;\r\n        return b;\r\n    };\r\n}\r\n\r\nexport default TradeSContent;\r\n","/*global chrome*/\r\n\r\nclass API {\r\n    static recieved = (callback) => (event) => {\r\n        try {\r\n            callback(JSON.parse(event.currentTarget.responseText));\r\n        } catch (e) {}\r\n    };\r\n\r\n    static authorize = (id, token, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"auth\",\r\n            data: { id: id, token: token },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static getUserById = (id, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"user\",\r\n            data: { id: id },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static getUserByKey = (key, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"user\",\r\n            data: { key: key },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static setUserSetts = (id, setts, callback) => {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.open(\"POST\", \"https://trades.pythonanywhere.com/api\");\r\n        var obj = {\r\n            method: \"setts\",\r\n            data: { id: id, setts: setts },\r\n        };\r\n        xhr.onload = API.recieved(callback);\r\n        xhr.send(JSON.stringify(obj));\r\n    };\r\n\r\n    static setUserSettsByKey = (key, setts, callback) => {\r\n        API.getUserByKey(key, (resp) => {\r\n            API.setUserSetts(resp.id, setts, callback);\r\n        });\r\n    };\r\n\r\n    static uploadMySetts = (callback) => {\r\n        var cb = callback;\r\n        chrome.storage.local.get([\"settsData\", \"userId\"], (res) => {\r\n            var r = res;\r\n            if (r.userId && r.settsData) {\r\n                var setts = {\r\n                    accessToken: r.settsData.accessToken\r\n                        ? r.settsData.accessToken\r\n                        : undefined,\r\n                    messages: r.settsData.messages\r\n                        ? r.settsData.messages.map((e) => {\r\n                              return {\r\n                                  groupToken: e.groupToken\r\n                                      ? e.groupToken\r\n                                      : undefined,\r\n                              };\r\n                          })\r\n                        : undefined,\r\n                };\r\n                API.setUserSetts(r.userId, setts, cb);\r\n            }\r\n        });\r\n    };\r\n\r\n    static downloadMySetts = (callback) => {\r\n        var cb = callback;\r\n        var self = this;\r\n        chrome.storage.local.get([\"settsData\", \"userId\"], (res) => {\r\n            var r = res;\r\n            if (r.userId) {\r\n                API.getUserById(r.userId, (user) => {\r\n                    var setts = r.settsData ? r.settsData : {};\r\n                    setts.messages = user.setts.messages\r\n                        ? user.setts.messages.map((e, i) => {\r\n                              e.toSend =\r\n                                  setts.messages &&\r\n                                  setts.messages[i] &&\r\n                                  setts.messages[i].toSend\r\n                                      ? setts.messages[i].toSend\r\n                                      : [];\r\n                              return e;\r\n                          })\r\n                        : [];\r\n                    setts.accessToken = user.setts.accessToken;\r\n                    chrome.storage.local.set({ settsData: setts }, () => {\r\n                        try {\r\n                            cb(setts);\r\n                        } catch (e) {}\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nexport default API;\r\n","/*global chrome*/\r\n\r\nimport React from \"react\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport WallpaperIcon from \"@material-ui/icons/Wallpaper\";\r\nimport AccountBoxIcon from \"@material-ui/icons/AccountBox\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport Breadcrumbs from \"@material-ui/core/Breadcrumbs\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport TradeSContent from \"./TradeSContent\";\r\nimport API from \"./API\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nclass CenterView extends React.Component {\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    position: \"absolute\",\r\n                    left: \"50%\",\r\n                    top: \"50%\",\r\n                    transform: \"translate(-50%, -50%)\",\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass DonatFrame extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <iframe\r\n                src=\"https://money.yandex.ru/quickpay/shop-widget?writer=seller&targets=%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%BA%D0%B0%20%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0%20Trade-S&targets-hint=&default-sum=&button-text=13&payment-type-choice=on&mobile-payment-type-choice=on&hint=&successURL=&quickpay=shop&account=4100115567443945\"\r\n                width=\"423\"\r\n                height=\"222\"\r\n                frameborder=\"0\"\r\n                allowtransparency=\"true\"\r\n                scrolling=\"no\"\r\n            ></iframe>\r\n        );\r\n    };\r\n}\r\n\r\nclass Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.state = { open: false, currentPage: 4 };\r\n\r\n        this.state = { registered: false, logined: false };\r\n        this.loadAccount();\r\n        var self = this;\r\n\r\n        chrome.runtime.onMessage.addListener(\r\n            (request, sender, sendResponse) => {\r\n                if (\r\n                    request.userId &&\r\n                    request.accessToken &&\r\n                    request.extension == \"TradeS\"\r\n                ) {\r\n                    sendResponse({});\r\n                    self.loadAccount();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    loadAccount = () => {\r\n        var self = this;\r\n        chrome.storage.local.get([\"userId\", \"settsData\"], (res) => {\r\n            var r = res;\r\n            if (r.settsData && r.settsData.accessToken && r.userId) {\r\n                chrome.storage.local.onChanged.addListener((r) => {\r\n                    r.settsData && API.uploadMySetts();\r\n                });\r\n                this.loadData(r.userId, r.settsData);\r\n            } else {\r\n                r.settsData = r.settsData ? r.settsData : {};\r\n                chrome.storage.local.set({ settsData: r.settsData }, () => {\r\n                    self.setState(\r\n                        (state) => {\r\n                            state.logined = true;\r\n                            state.registered = false;\r\n                            state.accessToken = undefined;\r\n                            state.userId = undefined;\r\n                            return state;\r\n                        },\r\n                        () => {}\r\n                    );\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    loadData = (userId, setts) => {\r\n        var s = setts;\r\n        var self = this;\r\n        self.setState(\r\n            (state) => {\r\n                state.logined = true;\r\n            },\r\n            () => {\r\n                chrome.storage.local.set({ TRSVkLogin: false }, () => {\r\n                    API.downloadMySetts(() => {\r\n                        self.setState((state) => {\r\n                            state.registered = true;\r\n                            state.accessToken = s.accessToken;\r\n                            state.userId = userId;\r\n                            return state;\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    register = () => {\r\n        chrome.storage.local.set({ \"TRSVkLogin\": true }, () => {\r\n            window.open(\r\n                \"https://oauth.vk.com/authorize?client_id=6290333&scope=wall,offline&redirect_uri=http://oauth.vk.com/blank.html&response_type=token&v=5.92\"\r\n            );\r\n        });\r\n    };\r\n\r\n    onPanelSwitch = (open) => (event) => {\r\n        if (open === null) {\r\n            open = !this.state.open;\r\n        }\r\n        if (\r\n            event &&\r\n            event.type === \"keydown\" &&\r\n            (event.key === \"Tab\" || event.key === \"Shift\")\r\n        ) {\r\n            return;\r\n        }\r\n        this.setState((state) => {\r\n            state.open = open;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    home = () => {\r\n        this.setState((state) => {\r\n            state.currentPage = 4;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    authContent = (logined) => {\r\n        if (!logined) {\r\n            return <CircularProgress color=\"#e0f7fa\" />;\r\n        }\r\n        return (\r\n            <Card\r\n                style={{\r\n                    width: 450,\r\n                }}\r\n            >\r\n                <CardHeader\r\n                    avatar={<Avatar src=\"icon_128.png\" />}\r\n                    title={<Typography variant=\"h5\">Trade-S</Typography>}\r\n                    subheader=\"Авторизация\"\r\n                />\r\n                <CardContent\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Typography>\r\n                        Для использования расширения необходимо пройти\r\n                        авторизацию с помощью ВКонтакте.\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={this.register}\r\n                    >\r\n                        Авторизироваться ВКонтакте\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n    };\r\n\r\n    render = () => {\r\n        if (!this.state.registered) {\r\n            return (\r\n                <Backdrop open={true} style={{ color: \"#e3e5fc\" }}>\r\n                    <CenterView>\r\n                        {this.authContent(this.state.logined)}\r\n                    </CenterView>\r\n                </Backdrop>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            onClick={this.onPanelSwitch(true)}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Avatar\r\n                            src=\"icon_128.png\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                            onClick={this.home}\r\n                        />\r\n                        <Typography\r\n                            style={{ cursor: \"pointer\", marginLeft: 10 }}\r\n                            onClick={this.home}\r\n                            variant=\"h6\"\r\n                        >\r\n                            Trade-S\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <SwipeableDrawer\r\n                    open={this.state.open}\r\n                    onOpen={this.onPanelSwitch(true)}\r\n                    onClose={this.onPanelSwitch(false)}\r\n                >\r\n                    <PageMenu page={this} />\r\n                </SwipeableDrawer>\r\n                <TradeSPath currentPage={this.state.currentPage} page={this} />\r\n                <TradeSContent currentPage={this.state.currentPage} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nclass TradeSPath extends React.Component {\r\n    home = () => {\r\n        this.props.page.setState((state) => {\r\n            state.currentPage = 4;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <Breadcrumbs style={{ padding: 20 }} aria-label=\"breadcrumb\">\r\n                <Link style={{ cursor: \"pointer\" }} onClick={this.home}>\r\n                    Trade-S\r\n                </Link>\r\n                <Typography style={{ cursor: \"default\" }}>\r\n                    {\r\n                        [\r\n                            \"Сообщения в чатах группы\",\r\n                            \"Пост на стене группы\",\r\n                            \"Формат сигналов\",\r\n                            \"Дополнительно\",\r\n                            \"\",\r\n                        ][this.props.currentPage]\r\n                    }\r\n                </Typography>\r\n            </Breadcrumbs>\r\n        );\r\n    };\r\n}\r\n\r\nclass PageMenu extends React.Component {\r\n    openMessages = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 0;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openPosts = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 1;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openFormat = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 2;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    openAccount = () => {\r\n        this.props.page.setState((state) => {\r\n            state.open = false;\r\n            state.currentPage = 3;\r\n            return state;\r\n        });\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <>\r\n                <List style={{ marginTop: -8 }}>\r\n                    <ListItem\r\n                        style={{\r\n                            padding: 16,\r\n                            paddingLeft: 25,\r\n                            background: \"#3f51b5\",\r\n                            color: \"white\",\r\n                        }}\r\n                        button\r\n                        key={\"Меню настроек\"}\r\n                        onClick={this.props.page.onPanelSwitch(false)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <ArrowBackIcon style={{ color: \"white\" }} />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            style={{ marginLeft: -20 }}\r\n                            primary={\"Меню настроек\"}\r\n                        />\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <label style={{ textAlign: \"center\" }}>\r\n                    Отправка сигналов в ВК\r\n                </label>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openMessages}\r\n                        key={\"Сообщения в чатах группы\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <EmailIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Сообщения в чатах группы\"} />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openPosts}\r\n                        key={\"Пост на стене группы\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <WallpaperIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Пост на стене группы\"} />\r\n                    </ListItem>\r\n                </List>\r\n\r\n                <Divider />\r\n                <label style={{ textAlign: \"center\" }}>Другие настройки</label>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openFormat}\r\n                        key={\"Формат сигналов\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <RadioButtonCheckedIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Формат сигналов\"} />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={this.openAccount}\r\n                        key={\"Дополнительно\"}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <AccountBoxIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={\"Дополнительно\"} />\r\n                    </ListItem>\r\n                </List>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Page;\r\n","import React from 'react';\nimport Page from './MainPage'\n\nfunction App() {\n  return (\n    <Page/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}